{"version":3,"sources":["samples/core/index.ts","samples/core/fuseHmrPlugin.ts","samples/core/hmr.ts","packages/core/src/index.ts","samples/core/elements/app-root.ts","packages/core/src/attribute.ts","packages/core/src/prop.ts","packages/core/src/logger.ts","packages/core/src/property.ts","packages/core/src/customElement.ts","packages/core/src/transmitter.ts","packages/core/src/state.ts","packages/core/src/requestRender.ts","packages/core/src/disconnectedCallback.ts","samples/core/state/viewState.ts","samples/core/elements/getElementMarkup.ts","packages/core/src/symbols.ts","samples/core/elements/sample-default.ts","samples/core/elements/sample-no1.ts","samples/core/elements/sample-no2.ts","samples/core/elements/sample-no3.ts","samples/core/elements/sample-no4.ts","samples/core/state/formState.ts"],"names":["core_1","payload","helper","updates","window","dispatchEvent","CustomEvent","isStylesheeetUpdate","flushModules","updateModules","callModules","flushAll","callEntries","document","body","innerHTML","setTimeout","custom_elements_hmr_polyfill_1","NONE","HTMLElement","elements","connectedCallback","viewState_1","render","view","setView","lit_html_1","map","element","getElementMarkup_1","options","_class","prop","Object","defineProperty","get","symbols_1","tagName","set","x","logger_1","oldValue","valuesChanged","skipRender","requestRender_1","configurable","attribute","replace","toLowerCase","Map","push","log","skipElements","globalThis","WeakMap","skip","context","has","count","ctx","name","tag","indexOf","id","getID","registerLoggerContext","text","Math","floor","length","idOnly","y","console","Array","join","isConnected","elementName","extended","elementClass","observedAttributes","value","prototype","isArray","concat","Base","constructor","renderCalled","call","result","template","Promise","resolve","then","templates","eventContext","updated","requestAnimationFrame","register","callers","disconnectedCallback","forEach","attributeChangedCallback","newValue","nameProp","customElements","define","hmrCache","channel","args","transmitter","i","len","func","apply","events","filter","event","state","keys","Set","addEventListener","newState","obj","part","assign","key","defaultValue","customPublishedTrigger","hasOwnProperty","currentState","setter","middleware","a__1","Error","add","__wait","core_2","exports","callback","_LHF_SYMBOL","_LHF_PROP_SYMBOL","observedAttributesMap","Symbol","logger","loggerCount","initSymbolCache","toUpperCase","form","setForm","formState_1","firstName","e","state_1","target","lastName","myvalue","myValue","type","propertyName","ele5","ele6","ele7"],"mappings":"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","file":"","sourcesContent":["import './hmr';\r\nimport './index.css';\r\n\r\nimport { enableInternalLogger } from '@simple-html/core';\r\nenableInternalLogger();\r\n\r\nimport './elements/app-root';\r\n","import { HMRHelper, HMRPayload } from 'fuse-box/types/hmr';\r\nexport default function (payload: HMRPayload, helper: HMRHelper) {\r\n    const { updates } = payload;\r\n\r\n    window.dispatchEvent(new CustomEvent('HMR-FUSEBOX'));\r\n\r\n    if (helper.isStylesheeetUpdate) {\r\n        helper.flushModules(updates);\r\n\r\n        helper.updateModules();\r\n\r\n        helper.callModules(updates);\r\n    } else {\r\n        helper.flushAll();\r\n        helper.updateModules();\r\n\r\n        helper.callEntries();\r\n    }\r\n}\r\n","import { applyPolyfill, ReflowStrategy } from 'custom-elements-hmr-polyfill';\r\n\r\nif (document.body) {\r\n    // I just want every thing to be rebuild from main element during hmr\r\n    document.body.innerHTML = '';\r\n    setTimeout(() => {\r\n        document.body.innerHTML = '<app-root></app-root>';\r\n    }, 0);\r\n}\r\n\r\napplyPolyfill(ReflowStrategy.NONE);\r\n","import 'tslib';\nexport { attribute } from './attribute';\nexport { prop } from './prop';\nexport { enableInternalLogger, disableInternalLogger } from './logger';\nexport { property } from './property';\nexport { customElement } from './customElement';\nexport { publish, subscribe, unSubscribe, publishNext, publishSync } from './transmitter';\nexport { validateKey, stateContainer, stateResult, assignState } from './state';\nexport { requestRender } from './requestRender';\nexport { disconnectedCallback } from './disconnectedCallback';\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\nimport { connectViewState, viewState } from '../state/viewState';\r\nimport { getElementMarkup } from './getElementMarkup';\r\n\r\n@customElement('app-root')\r\nexport default class extends HTMLElement {\r\n    elements = ['sample-default', 'sample-no1', 'sample-no2', 'sample-no3', 'sample-no4'];\r\n\r\n    connectedCallback() {\r\n        connectViewState(this, this.render);\r\n    }\r\n\r\n    render() {\r\n        const [view, setView] = viewState('element-default');\r\n        return html`<section class=\"flex flex-row flex-grow h-full\">\r\n            <div class=\"bg-gray-200 flex flex-col\">\r\n                ${this.elements.map((element) => {\r\n                    return html`<button\r\n                        class=\"p-2 m-2 bg-indigo-300\"\r\n                        @click=${() => setView(element)}\r\n                    >\r\n                        ${element}\r\n                    </button>`;\r\n                })}\r\n            </div>\r\n            <div class=\"bg-gray-300 flex-grow h-full p-2\">${getElementMarkup(view)}</div>\r\n        </section>`;\r\n    }\r\n}\r\n","import { requestRender } from './requestRender';\r\nimport {\r\n    getObservedAttributesMapSymbol,\r\n    getObservedAttributesSymbol,\r\n    getPropSymbol\r\n} from './symbols';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * @attibute- decorator\r\n * simple decorator for tracking custom element attribute changes\r\n * PS! do not set value manually, does not do anything\r\n */\r\nexport function attribute(options: { skipRender: boolean } = {} as any): Function {\r\n    return function reg(_class: any, prop: string): void {\r\n        Object.defineProperty(_class, prop, {\r\n            get: function () {\r\n                return this[getPropSymbol(this.tagName + '_' + prop)];\r\n            },\r\n            set: function (x: any) {\r\n                logger('attribute set', this, this.tagName);\r\n\r\n                const oldValue = this[getPropSymbol(this.tagName + '_' + prop)];\r\n                this[getPropSymbol(this.tagName + '_' + prop)] = x;\r\n                if (this.valuesChanged && oldValue !== x) {\r\n                    this.valuesChanged('property', prop, oldValue, x);\r\n                }\r\n                if (oldValue !== x && !options.skipRender) {\r\n                    requestRender(this);\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n\r\n        // replace uppercase with lower and add '-'\r\n        const attribute = prop\r\n            .replace(/([a-z])([A-Z])/g, '$1-$2')\r\n            .replace(/\\s+/g, '-')\r\n            .toLowerCase();\r\n\r\n        //create a map so we can find it later\r\n        if (!_class[getObservedAttributesMapSymbol()]) {\r\n            _class[getObservedAttributesMapSymbol()] = new Map();\r\n        }\r\n        _class[getObservedAttributesMapSymbol()].set(attribute, prop);\r\n\r\n        // add to observedAttributes\r\n        if (_class[getObservedAttributesSymbol()]) {\r\n            _class[getObservedAttributesSymbol()].push(attribute);\r\n        } else {\r\n            _class[getObservedAttributesSymbol()] = [];\r\n            _class[getObservedAttributesSymbol()].push(attribute);\r\n        }\r\n    };\r\n}\r\n","import { getPropSymbol } from './symbols';\r\n\r\n/**\r\n * @property prop\r\n * TODO combine this to cover property and attribute decorators\r\n *\r\n *\r\n */\r\nexport function prop(): Function {\r\n    return function reg(_class: Function, prop: string): void {\r\n        Object.defineProperty(_class, prop, {\r\n            get: function () {\r\n                return this[getPropSymbol(this.tagName + '_' + prop)];\r\n            },\r\n            set: function (x: any) {\r\n                this[getPropSymbol(this.tagName + '_' + prop)] = x;\r\n                return true;\r\n            },\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n","import { getLoggerSymbol, getLoggerCountSymbol } from './symbols';\r\n\r\n// maybe weird, but I need it to check everything is behaving correctly during render and hmr\r\n// but this will give\r\n\r\nlet log = false;\r\nlet skipElements: string[] = [];\r\n\r\nif (!(globalThis as any)[getLoggerSymbol()]) {\r\n    (globalThis as any)[getLoggerSymbol()] = new WeakMap();\r\n    (globalThis as any)[getLoggerCountSymbol()] = 0;\r\n}\r\n\r\nexport function enableInternalLogger(skip: string[] = []) {\r\n    skipElements = skip;\r\n    log = true;\r\n}\r\n\r\nexport function disableInternalLogger() {\r\n    log = false;\r\n}\r\n\r\nfunction registerLoggerContext(context: any) {\r\n    if (log) {\r\n        const map = (globalThis as any)[getLoggerSymbol()];\r\n        if (map.has(context)) {\r\n            throw 'contxt duplicate';\r\n        }\r\n\r\n        const count = (globalThis as any)[getLoggerCountSymbol()] + 1;\r\n        (globalThis as any)[getLoggerCountSymbol()] = count;\r\n\r\n        map.set(context, count);\r\n    }\r\n}\r\n\r\nfunction getID(ctx: any) {\r\n    if (log) {\r\n        const map = (globalThis as any)[getLoggerSymbol()];\r\n        return map.get(ctx);\r\n    }\r\n}\r\n\r\nexport function logger(name: string, ctx: any, tag: string) {\r\n    if (log && skipElements.indexOf(tag) === -1) {\r\n        let id = getID(ctx);\r\n        if (!id) {\r\n            registerLoggerContext(ctx);\r\n        }\r\n        id = getID(ctx);\r\n\r\n        // some weird parths, but want it to stay as a table\r\n\r\n        // find text length\r\n        const text = name || '??' + '' + (id || '?');\r\n        const x = 25 - Math.floor(text.length);\r\n\r\n        // find id length\r\n        const idOnly = '' + (id || '?');\r\n        const y = 6 - Math.floor(idOnly.length);\r\n\r\n        // show it\r\n        console.log(\r\n            `@SIMPLE-HTML/core | ${name}${Array(x).join(' ')}| id:${id || '?'}${Array(y).join(\r\n                ' '\r\n            )} | IsConnected:${ctx && ctx.isConnected === true ? 'Y' : 'N'} |  ${tag}`\r\n        );\r\n    }\r\n}\r\n","import { requestRender } from './requestRender';\r\nimport { getPropSymbol } from './symbols';\r\nimport { logger } from './logger';\r\n\r\n/**\r\n * @property decorator\r\n *\r\n */\r\nexport function property(options: { skipRender: boolean } = {} as any): Function {\r\n    return function reg(_class: Function, prop: string): void {\r\n        Object.defineProperty(_class, prop, {\r\n            get: function () {\r\n                return this[getPropSymbol(this.tagName + '_' + prop)];\r\n            },\r\n            set: function (x: any) {\r\n                logger('property set', this, this.tagName);\r\n\r\n                const oldValue = this[getPropSymbol(this.tagName + '_' + prop)];\r\n                this[getPropSymbol(this.tagName + '_' + prop)] = x;\r\n                if (this.valuesChanged && oldValue !== x) {\r\n                    this.valuesChanged('property', prop, oldValue, x);\r\n                }\r\n                if (oldValue !== x && !options.skipRender) {\r\n                    requestRender(this);\r\n                }\r\n            },\r\n            configurable: true\r\n        });\r\n    };\r\n}\r\n","import { render } from 'lit-html';\nimport { getObservedAttributesSymbol, getObservedAttributesMapSymbol } from './symbols';\nimport { logger } from './logger';\n\n/**\n * @customElement- decorator\n *\n */\nexport function customElement(elementName: string, extended?: ElementDefinitionOptions) {\n    return function reg(elementClass: any) {\n        const observedAttributes = elementClass.observedAttributes;\n        Object.defineProperty(elementClass, 'observedAttributes', {\n            set: function (value) {\n                elementClass.prototype[getObservedAttributesSymbol()] = value;\n                return true;\n            },\n            get: function () {\n                return elementClass.prototype[getObservedAttributesSymbol()];\n            },\n            configurable: true\n        });\n\n        if (Array.isArray(observedAttributes) && Array.isArray(elementClass.observedAttributes)) {\n            elementClass.observedAttributes = elementClass.observedAttributes.concat(\n                observedAttributes\n            );\n        }\n        // if @attribute is not used we just use the standard if any\n        if (Array.isArray(observedAttributes) && !Array.isArray(elementClass.observedAttributes)) {\n            elementClass.observedAttributes = observedAttributes;\n        }\n\n        const Base: any = class extends elementClass {\n            constructor() {\n                super();\n                logger('constructor', this, super.tagName);\n            }\n\n            renderCalled() {\n                if (super.renderCalled) {\n                    super.renderCalled.call(this);\n                }\n            }\n\n            render(...result: any[]) {\n                if (super.render) {\n                    logger('render', this, super.tagName);\n                    const template = super.render.call(this, ...result);\n                    Promise.resolve(template).then((templates) => {\n                        render(templates, this as any, { eventContext: this as any });\n                        if (super.updated) {\n                            //delay so it actually get a chance to update\n                            requestAnimationFrame(() => {\n                                super.updated();\n                            });\n                        }\n                    });\n                }\n                this.renderCalled();\n            }\n            connectedCallback() {\n                logger('connectedCallback', this, super.tagName);\n                if (super.connectedCallback) {\n                    super.connectedCallback.call(this);\n                }\n                this.render(this);\n            }\n\n            register(call: Function) {\n                if (this.callers) {\n                    this.callers.push(call);\n                } else {\n                    this.callers = [];\n                    this.callers.push(call);\n                }\n            }\n\n            disconnectedCallback() {\n                logger('disconnectedCallback', this, super.tagName);\n                if (this.callers) {\n                    this.callers.forEach((call: Function) => call());\n                }\n                this.callers = [];\n                if (super.disconnectedCallback) {\n                    super.disconnectedCallback.call(this);\n                }\n            }\n            attributeChangedCallback(name: string, oldValue: string, newValue: string) {\n                logger('attributeChangedCallback', this, super.tagName);\n                //get map\n\n                if (!this[getObservedAttributesMapSymbol()]) {\n                    const attribute = name\n                        .replace(/([a-z])([A-Z])/g, '$1-$2')\n                        .replace(/\\s+/g, '-')\n                        .toLowerCase();\n                    this[getObservedAttributesMapSymbol()] = new Map();\n                    this[getObservedAttributesMapSymbol()].set(attribute, name);\n                }\n\n                const nameProp = this[getObservedAttributesMapSymbol()].get(name);\n                this[nameProp] = newValue || '';\n                // if normal attributeChanged is set\n                if (super.attributeChangedCallback) {\n                    super.attributeChangedCallback.call(this, name, oldValue, newValue);\n                }\n                //if our simpler method is set (this is used by the @attribute and @property decorators)\n                if (super.valuesChanged) {\n                    super.valuesChanged('attribute', name, oldValue, newValue);\n                }\n            }\n        };\n        if (!customElements.get(elementName)) {\n            if (extended) {\n                customElements.define(elementName, Base, extended);\n            } else {\n                customElements.define(elementName, Base);\n            }\n        } else {\n            if ((globalThis as any).hmrCache) {\n                if (extended) {\n                    customElements.define(elementName, Base, extended);\n                } else {\n                    customElements.define(elementName, Base);\n                }\n            }\n        }\n    };\n}\n","import { getTransmitterSymbol } from './symbols';\r\n\r\n// we need this to survive hmr so parts can unsubsribe\r\nif (!(globalThis as any)[getTransmitterSymbol()]) {\r\n    (globalThis as any)[getTransmitterSymbol()] = {};\r\n}\r\n\r\nfunction transmitter() {\r\n    return (globalThis as any)[getTransmitterSymbol()];\r\n}\r\n\r\n// microtask\r\nexport function publish(channel: string, ...args: any[]): void {\r\n    Promise.resolve().then(() => {\r\n        if (Array.isArray(transmitter()[channel])) {\r\n            for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\r\n                const ctx = transmitter()[channel][i].ctx;\r\n                transmitter()[channel][i].func.apply(ctx, args);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// sync\r\nexport function publishSync(channel: string, ...args: any[]): void {\r\n    if (Array.isArray(transmitter()[channel])) {\r\n        for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\r\n            const ctx = transmitter()[channel][i].ctx;\r\n            transmitter()[channel][i].func.apply(ctx, args);\r\n        }\r\n    }\r\n}\r\n\r\n//next task\r\nexport function publishNext(channel: string, ...args: any[]): void {\r\n    setTimeout(() => {\r\n        if (Array.isArray(transmitter()[channel])) {\r\n            for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\r\n                const ctx = transmitter()[channel][i].ctx;\r\n                transmitter()[channel][i].func.apply(ctx, args);\r\n            }\r\n        }\r\n    }, 0);\r\n}\r\n\r\n// sync\r\nexport function unSubscribe(channel: string, ctx: any): void {\r\n    if (Array.isArray(transmitter()[channel])) {\r\n        const events = transmitter()[channel].filter((event: any) => {\r\n            if (event.ctx !== ctx) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        });\r\n        transmitter()[channel] = events;\r\n    }\r\n}\r\n\r\n// sync\r\nexport function subscribe(channel: string, ctx: any, func: Function): void {\r\n    if (!Array.isArray(transmitter()[channel])) {\r\n        transmitter()[channel] = [];\r\n    }\r\n    transmitter()[channel].push({ ctx: ctx, func: func });\r\n}\r\n","import { publish } from '.';\n\nlet state = (window as any).state || {};\nconst keys = new Set();\ntype valueSetter<T> = (value: T) => void;\n\n// helper for fusebox hmr event\nif (!(window as any).state) {\n    window.addEventListener('HMR-FUSEBOX', () => {\n        (window as any).state = state;\n        console.log('HMR-FUSEBOX', (window as any).state);\n    });\n}\n\nexport type stateResult<T> = [T, valueSetter<T>];\n\n/**\n * Get current glabal state\n * great for saving state for next time user opens website\n */\nexport function getState() {\n    state;\n}\n\n/**\n * overide current state\n * great for restoring state time user opens website\n */\nexport function setState<T>(newState: T) {\n    state = newState;\n}\n\nexport function assignState<T, K extends keyof T>(obj: T, part: Pick<T, K>) {\n    return Object.assign(obj, part);\n}\n\n/**\n * simple state container\n * @param key key used in state container and event\n * @param defaultValue default state value\n * @param customPublishedTrigger if you do not want it to publish update event\n */\nexport function stateContainer<T>(\n    key: string,\n    defaultValue: T,\n    customPublishedTrigger?: boolean\n): stateResult<T> {\n    //set default value if not set\n    if (!state.hasOwnProperty(key)) {\n        state[key] = defaultValue;\n    }\n\n    const currentState: T = state[key];\n    const setter = function (value: T) {\n        state[key] = value;\n    };\n\n    const middleware = function (value: any) {\n        setter(value);\n        publish(key, value);\n    };\n\n    return [currentState, customPublishedTrigger ? setter : middleware];\n}\n\n/**\n * simple warning if you reuse a key by accident\n * @param key\n */\nexport function validateKey(key: string) {\n    if (keys.has(key)) {\n        throw new Error(`state key used allready, use another name`);\n    } else {\n        keys.add(key);\n        return key;\n    }\n}\n","// simple helper to delay re-render\r\nexport function requestRender(ctx: any) {\r\n    if (ctx.isConnected) {\r\n        if (ctx.__wait) {\r\n        } else {\r\n            ctx.__wait = true;\r\n            requestAnimationFrame(async () => {\r\n                await Promise.resolve(true);\r\n                ctx.render();\r\n                ctx.__wait = false;\r\n            });\r\n        }\r\n    }\r\n}\r\n","/**\r\n * Calls function when element disconnects\r\n * @param ctx SimpleHtml element only\r\n * @param call\r\n */\r\nexport function disconnectedCallback(ctx: HTMLElement, call: Function) {\r\n    (ctx as any).register(call);\r\n}\r\n","import { subscribe, unSubscribe, disconnectedCallback } from '@simple-html/core';\r\nimport { validateKey, stateContainer, stateResult } from '@simple-html/core';\r\n\r\n/**\r\n * key and validate key, so we know we dont have duplicates\r\n */\r\nexport const STATE_KEY = 'VIEW_STATE';\r\nvalidateKey(STATE_KEY);\r\n\r\n/**\r\n * connect state\r\n */\r\nexport function connectViewState(context: HTMLElement, callback: Function): void {\r\n    // this register callback with simpleHtml elements disconnected callback\r\n    disconnectedCallback(context, () => unSubscribe(STATE_KEY, context));\r\n\r\n    // for following the event we just use the internal event handler\r\n    subscribe(STATE_KEY, context, callback);\r\n}\r\n\r\n/**\r\n * function to get state/state setter\r\n */\r\nexport type state = string;\r\nexport function viewState(defaultValue = '' as state): stateResult<state> {\r\n    return stateContainer<state>(STATE_KEY, defaultValue);\r\n}\r\n","import { html } from 'lit-html';\r\nimport './sample-default';\r\nimport './sample-no1';\r\nimport './sample-no2';\r\nimport './sample-no3';\r\nimport './sample-no4';\r\n\r\nexport function getElementMarkup(element: string) {\r\n    switch (element) {\r\n        case 'sample-no1':\r\n            return html`<sample-no1></sample-no1>`;\r\n        case 'sample-no2':\r\n            return html`<sample-no2></sample-no2>`;\r\n        case 'sample-no3':\r\n            return html`<sample-no3></sample-no3>`;\r\n        case 'sample-no4':\r\n            return html`<sample-no4></sample-no4>`;\r\n        default:\r\n            return html`<sample-default></sample-default>`;\r\n    }\r\n}\r\n","export function initSymbolCache() {\r\n    if (!(globalThis as any)._LHF_SYMBOL) {\r\n        (globalThis as any)._LHF_SYMBOL = {};\r\n        (globalThis as any)._LHF_PROP_SYMBOL = {};\r\n    }\r\n}\r\n\r\nexport function getObservedAttributesMapSymbol() {\r\n    if (!(globalThis as any)._LHF_SYMBOL.observedAttributesMap) {\r\n        (globalThis as any)._LHF_SYMBOL.observedAttributesMap = Symbol('observedAttributesMap');\r\n        return (globalThis as any)._LHF_SYMBOL.observedAttributesMap;\r\n    } else {\r\n        return (globalThis as any)._LHF_SYMBOL.observedAttributesMap;\r\n    }\r\n}\r\n\r\nexport function getObservedAttributesSymbol() {\r\n    if (!(globalThis as any)._LHF_SYMBOL.observedAttributes) {\r\n        (globalThis as any)._LHF_SYMBOL.observedAttributes = Symbol('observedAttributes');\r\n        return (globalThis as any)._LHF_SYMBOL.observedAttributes;\r\n    } else {\r\n        return (globalThis as any)._LHF_SYMBOL.observedAttributes;\r\n    }\r\n}\r\n\r\nexport function getPropSymbol(name: string) {\r\n    if (!(globalThis as any)._LHF_PROP_SYMBOL[name]) {\r\n        (globalThis as any)._LHF_PROP_SYMBOL[name] = Symbol(name);\r\n        return (globalThis as any)._LHF_PROP_SYMBOL[name];\r\n    } else {\r\n        return (globalThis as any)._LHF_PROP_SYMBOL[name];\r\n    }\r\n}\r\n\r\nexport function getLoggerSymbol() {\r\n    if (!(globalThis as any)._LHF_SYMBOL.logger) {\r\n        (globalThis as any)._LHF_SYMBOL.logger = Symbol('logger');\r\n        return (globalThis as any)._LHF_SYMBOL.logger;\r\n    } else {\r\n        return (globalThis as any)._LHF_SYMBOL.logger;\r\n    }\r\n}\r\n\r\nexport function getLoggerCountSymbol() {\r\n    if (!(globalThis as any)._LHF_SYMBOL.loggerCount) {\r\n        (globalThis as any)._LHF_SYMBOL.loggerCount = Symbol('loggerCount');\r\n        return (globalThis as any)._LHF_SYMBOL.loggerCount;\r\n    } else {\r\n        return (globalThis as any)._LHF_SYMBOL.loggerCount;\r\n    }\r\n}\r\n\r\nexport function getTransmitterSymbol() {\r\n    if (!(globalThis as any)._LHF_SYMBOL.transmitter) {\r\n        (globalThis as any)._LHF_SYMBOL.transmitter = Symbol('transmitter');\r\n        return (globalThis as any)._LHF_SYMBOL.transmitter;\r\n    } else {\r\n        return (globalThis as any)._LHF_SYMBOL.transmitter;\r\n    }\r\n}\r\n\r\ninitSymbolCache();\r\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\nimport { viewState } from '../state/viewState';\r\n\r\n@customElement('sample-default')\r\nexport default class extends HTMLElement {\r\n    render() {\r\n        const [view] = viewState();\r\n        return html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p>Click on the buttons to the left to try different samples</p>\r\n            <p>\r\n                Core is very simple and olnly here to help write less code and make hmr work better\r\n            </p>\r\n            <p>\r\n                Swicthing views like this is ok for parts of application, but you should look at\r\n                router for better control\r\n            </p>`;\r\n    }\r\n}\r\n","import { customElement } from '@simple-html/core';\nimport { html } from 'lit-html';\nimport { viewState } from '../state/viewState';\nimport { formState } from '../state/formState';\nimport { assignState } from '@simple-html/core/src/state';\n\n@customElement('sample-no1')\nexport default class extends HTMLElement {\n    render() {\n        // get our state containers\n        const [view] = viewState();\n        const [form, setForm] = formState();\n\n        return html`\n            <span class=\"text-xl\">${view.toUpperCase()}</span>\n\n            <p class=\"mt-2 mb-2\">Simple state management that works with hmr</p>\n            <p class=\"mt-2 mb-2\">Edit and go to sample 2</p>\n\n            <div class=\"m-auto flex flex-col\">\n                <label>\n                    FirstName:\n                    <input\n                        class=\"p-2 m-1\"\n                        .value=${form.firstName || ''}\n                        @input=${(e: any) =>\n                            setForm(assignState(form, { firstName: e.target.value }))}\n                    />\n                </label>\n                <label>\n                    LastName:\n                    <input\n                        class=\"p-2 m-1\"\n                        .value=${form.lastName || ''}\n                        @input=${(e: any) =>\n                            setForm(Object.assign(form, { lastName: e.target.value }))}\n                    />\n                </label>\n            </div>\n        `;\n    }\n}\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\nimport { viewState } from '../state/viewState';\r\nimport { formState } from '../state/formState';\r\n\r\n@customElement('sample-no2')\r\nexport default class extends HTMLElement {\r\n    render() {\r\n        // get our state containers\r\n        const [view] = viewState();\r\n        const [form, setForm] = formState();\r\n\r\n        return html`\r\n            <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n\r\n            <p class=\"mt-2 mb-2\">Simple state management that works with hmr</p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"m-auto flex flex-col\">\r\n                <label>\r\n                    FirstName:\r\n                    <input\r\n                        class=\"p-2 m-1\"\r\n                        .value=${form.firstName || ''}\r\n                        @input=${(e: any) =>\r\n                            setForm(Object.assign(form, { firstName: e.target.value }))}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    LastName:\r\n                    <input\r\n                        class=\"p-2 m-1\"\r\n                        .value=${form.lastName || ''}\r\n                        @input=${(e: any) =>\r\n                            setForm(Object.assign(form, { lastName: e.target.value }))}\r\n                    />\r\n                </label>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\n\r\nimport { property, attribute } from '@simple-html/core';\r\nimport { viewState } from '../state/viewState';\r\n\r\n@customElement('sample-no3')\r\nexport default class extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    render() {\r\n        const [view] = viewState();\r\n        return html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p class=\"mt-2 mb-2\">\r\n                Shows how to use @property and @attribute to trigger rerendering on changes\r\n            </p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"flex flex-col\">\r\n                <button\r\n                    class=\"bg-green-500 p-2 w-56\"\r\n                    @click=${() => {\r\n                        this.count = this.count + 1;\r\n                    }}\r\n                >\r\n                    count ++\r\n                </button>\r\n\r\n                <span>ele-one - using property decorator - auto rerender</span>\r\n                <ele-1 .myvalue=${this.count}></ele-1>\r\n\r\n                <span>ele-two- using attribute decorator - auto rerender</span>\r\n                <ele-2 my-value=${this.count}></ele-2>\r\n\r\n                <span>ele-one - using property decorator - manual rerender delayed</span>\r\n                <ele-3 .myvalue=${this.count}></ele-3>\r\n\r\n                <span>ele-two- using attribute decorator - manual rerender delayed</span>\r\n                <ele-4 my-value=${this.count}></ele-4>\r\n            </div>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-1></ele-1>\r\n */\r\n@customElement('ele-1')\r\nexport class Ele1 extends HTMLElement {\r\n    @property() myvalue = 0;\r\n\r\n    render() {\r\n        return html`<span>${this.myvalue}</span>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-2></ele-2>\r\n */\r\n@customElement('ele-2')\r\nexport class Ele2 extends HTMLElement {\r\n    @attribute() myValue = 0;\r\n\r\n    render() {\r\n        return html`<span>${this.myValue}</span>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-3></ele-3>\r\n */\r\n@customElement('ele-3')\r\nexport class Ele3 extends HTMLElement {\r\n    @property({ skipRender: true }) myvalue = 0;\r\n\r\n    valuesChanged(type: string, propertyName: string, oldValue: any, newValue: any) {\r\n        console.log(type, propertyName, oldValue, newValue);\r\n        //small delay see it\r\n        setTimeout(() => {\r\n            this.render();\r\n        }, 700);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>${this.myvalue}</span>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-4></ele-4>\r\n */\r\n@customElement('ele-4')\r\nexport class Ele4F extends HTMLElement {\r\n    @attribute({ skipRender: true }) myValue = 0;\r\n\r\n    valuesChanged(type: string, propertyName: string, oldValue: any, newValue: any) {\r\n        console.log(type, propertyName, oldValue, newValue);\r\n        //small delay see it\r\n        setTimeout(() => {\r\n            this.render();\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>${this.myValue}</span>`;\r\n    }\r\n}\r\n","import { customElement, unSubscribe } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\n\r\nimport { property, publish, subscribe } from '@simple-html/core';\r\nimport { viewState } from '../state/viewState';\r\n\r\n@customElement('sample-no4')\r\nexport default class extends HTMLElement {\r\n    @property() ele5 = 0;\r\n    @property() ele6 = 0;\r\n    @property() ele7 = 0;\r\n\r\n    connectedCallback() {\r\n        // you could use 1 here and pass name back..\r\n        subscribe('ele-5', this, (newValue: any) => {\r\n            this.ele5 = newValue;\r\n        });\r\n        subscribe('ele-6', this, (newValue: any) => {\r\n            this.ele6 = newValue;\r\n        });\r\n        subscribe('ele-7', this, (newValue: any) => {\r\n            this.ele7 = newValue;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('ele5', this);\r\n        unSubscribe('ele6', this);\r\n        unSubscribe('ele7', this);\r\n    }\r\n\r\n    render() {\r\n        const [view] = viewState();\r\n        return html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p class=\"mt-2 mb-2\">\r\n                Shows send data between elements, some elements arn always connected, so this will\r\n                help with this if you do not want to create a state container\r\n            </p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"flex flex-col\">\r\n                <span>ele-5-external: ${this.ele5}</span>\r\n                <span>ele-6-external: ${this.ele6}</span>\r\n                <span>ele-7-external: ${this.ele7}</span>\r\n\r\n                <button\r\n                    class=\"bg-green-500 p-2 w-56\"\r\n                    @click=${() => {\r\n                        publish('update');\r\n                    }}\r\n                >\r\n                    publish all +1 to all\r\n                </button>\r\n\r\n                <ele-5 class=\"flex flex-col w-56 bg-indigo-200 mt-2\"></ele-5>\r\n\r\n                <ele-6 class=\"flex flex-col w-56 bg-indigo-400 mt-2\"></ele-6>\r\n\r\n                <ele-7 class=\"flex flex-col w-56 bg-indigo-300 mt-2\"></ele-7>\r\n            </div>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-1></ele-1>\r\n */\r\n@customElement('ele-5')\r\nexport class Ele5 extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    connectedCallback() {\r\n        subscribe('update', this, () => {\r\n            this.count++;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('update', this);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\r\n                    this.count++;\r\n                    publish('ele-5', this.count);\r\n                }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-2></ele-2>\r\n */\r\n\r\n@customElement('ele-6')\r\nexport class Ele6 extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    connectedCallback() {\r\n        subscribe('update', this, () => {\r\n            this.count++;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('update', this);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\r\n                    this.count++;\r\n                    publish('ele-6', this.count);\r\n                }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-4></ele-4>\r\n */\r\n\r\n@customElement('ele-7')\r\nexport class Ele7 extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    connectedCallback() {\r\n        subscribe('update', this, () => {\r\n            this.count++;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('update', this);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\r\n                    this.count++;\r\n                    publish('ele-7', this.count);\r\n                }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\r\n    }\r\n}\r\n","import { subscribe, unSubscribe, disconnectedCallback } from '@simple-html/core';\r\nimport { validateKey, stateContainer, stateResult } from '@simple-html/core';\r\n\r\n/**\r\n * key and validate key, so we know we dont have duplicates\r\n */\r\nexport const STATE_KEY = 'FORM_STATE';\r\nvalidateKey(STATE_KEY);\r\n\r\n/**\r\n * connect state\r\n */\r\nexport function connectFormState(context: HTMLElement, callback: Function): void {\r\n    // this register callback with simpleHtml elements disconnected callback\r\n    disconnectedCallback(context, () => unSubscribe(STATE_KEY, context));\r\n\r\n    // for following the event we just use the internal event handler\r\n    subscribe(STATE_KEY, context, callback);\r\n}\r\n\r\n/**\r\n * function to get state/state setter\r\n */\r\nexport type state = { firstName: string; lastName: string };\r\nexport function formState(defaultValue = {} as state): stateResult<state> {\r\n    return stateContainer<state>(STATE_KEY, defaultValue);\r\n}\r\n"]}