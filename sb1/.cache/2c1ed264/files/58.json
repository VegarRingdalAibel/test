{"contents":"var __fuse_decorate = __fusereq(10);\nexports.__esModule = true;\nvar core_1 = __fusereq(42);\nvar lit_html_1 = __fusereq(11);\nvar core_2 = __fusereq(42);\nvar viewState_1 = __fusereq(53);\nlet __DefaultExport__ = class __DefaultExport__ extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.count = 0;\n  }\n  render() {\n    const [view] = viewState_1.viewState();\n    return lit_html_1.html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p class=\"mt-2 mb-2\">\r\n                Shows how to use @property and @attribute to trigger rerendering on changes\r\n            </p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"flex flex-col\">\r\n                <button\r\n                    class=\"bg-green-500 p-2 w-56\"\r\n                    @click=${() => {\n      this.count = this.count + 1;\n    }}\r\n                >\r\n                    count ++\r\n                </button>\r\n\r\n                <span>ele-one - using property decorator - auto rerender</span>\r\n                <ele-1 .myvalue=${this.count}></ele-1>\r\n\r\n                <span>ele-two- using attribute decorator - auto rerender</span>\r\n                <ele-2 my-value=${this.count}></ele-2>\r\n\r\n                <span>ele-one - using property decorator - manual rerender delayed</span>\r\n                <ele-3 .myvalue=${this.count}></ele-3>\r\n\r\n                <span>ele-two- using attribute decorator - manual rerender delayed</span>\r\n                <ele-4 my-value=${this.count}></ele-4>\r\n            </div>`;\n  }\n};\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], __DefaultExport__.prototype, \"count\", void 0);\n__DefaultExport__ = __fuse_decorate.d([core_1.customElement('sample-no3')], __DefaultExport__);\nexports.default = __DefaultExport__;\nlet Ele1 = class Ele1 extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.myvalue = 0;\n  }\n  render() {\n    return lit_html_1.html`<span>${this.myvalue}</span>`;\n  }\n};\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], Ele1.prototype, \"myvalue\", void 0);\nEle1 = __fuse_decorate.d([core_1.customElement('ele-1')], Ele1);\nexports.Ele1 = Ele1;\nlet Ele2 = class Ele2 extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.myValue = 0;\n  }\n  render() {\n    return lit_html_1.html`<span>${this.myValue}</span>`;\n  }\n};\n__fuse_decorate.d([core_2.attribute(), __fuse_decorate.m(\"design:type\", Object)], Ele2.prototype, \"myValue\", void 0);\nEle2 = __fuse_decorate.d([core_1.customElement('ele-2')], Ele2);\nexports.Ele2 = Ele2;\nlet Ele3 = class Ele3 extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.myvalue = 0;\n  }\n  valuesChanged(type, propertyName, oldValue, newValue) {\n    console.log(type, propertyName, oldValue, newValue);\n    setTimeout(() => {\n      this.render();\n    }, 700);\n  }\n  render() {\n    return lit_html_1.html`<span>${this.myvalue}</span>`;\n  }\n};\n__fuse_decorate.d([core_2.property({\n  skipRender: true\n}), __fuse_decorate.m(\"design:type\", Object)], Ele3.prototype, \"myvalue\", void 0);\nEle3 = __fuse_decorate.d([core_1.customElement('ele-3')], Ele3);\nexports.Ele3 = Ele3;\nlet Ele4F = class Ele4F extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.myValue = 0;\n  }\n  valuesChanged(type, propertyName, oldValue, newValue) {\n    console.log(type, propertyName, oldValue, newValue);\n    setTimeout(() => {\n      this.render();\n    }, 1000);\n  }\n  render() {\n    return lit_html_1.html`<span>${this.myValue}</span>`;\n  }\n};\n__fuse_decorate.d([core_2.attribute({\n  skipRender: true\n}), __fuse_decorate.m(\"design:type\", Object)], Ele4F.prototype, \"myValue\", void 0);\nEle4F = __fuse_decorate.d([core_1.customElement('ele-4')], Ele4F);\nexports.Ele4F = Ele4F;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/elements/sample-no3.ts\"],\"names\":[\"HTMLElement\",\"count\",\"render\",\"view\",\"viewState_1\",\"lit_html_1\",\"toUpperCase\",\"core_2\",\"core_1\",\"myvalue\",\"myValue\",\"valuesChanged\",\"type\",\"propertyName\",\"oldValue\",\"newValue\",\"console\",\"log\",\"setTimeout\",\"skipRender\"],\"mappings\":\";;;;;;wBAOe,gCAAcA;;;SACbC,QAAQ;;EAEpBC;WACWC,QAAQC;WACRC,yCAA8BF,KAAKG;;;;;;;;;obASrB;MACL,KAAKL,QAAQ,KAAKA,QAAQ;;;;;;;yMAOhB,KAAKA;;;oVAGL,KAAKA;;;yeAGL,KAAKA;;;8nBAGL,KAAKA;;;;mBA9BlCM;uCAFJC,qBAAc;;WAyCR,mBAAmBR;;;SACVS,UAAU;;EAEtBP;WACWG,wBAAa,KAAKI;;;mBAH5BF;0BAFJC,qBAAc;;WAaR,mBAAmBR;;;SACTU,UAAU;;EAEvBR;WACWG,wBAAa,KAAKK;;;mBAH5BH;0BAFJC,qBAAc;;WAaR,mBAAmBR;;;SACUS,UAAU;;EAE1CE,cAAcC,MAAcC,cAAsBC,UAAeC;IAC7DC,QAAQC,IAAIL,MAAMC,cAAcC,UAAUC;IAE1CG,WAAW;MACP,KAAKhB;OACN;;EAGPA;WACWG,wBAAa,KAAKI;;;mBAX5BF;EAAWY,YAAY;;0BAF3BX,qBAAc;;YAqBR,oBAAoBR;;;SACUU,UAAU;;EAE3CC,cAAcC,MAAcC,cAAsBC,UAAeC;IAC7DC,QAAQC,IAAIL,MAAMC,cAAcC,UAAUC;IAE1CG,WAAW;MACP,KAAKhB;OACN;;EAGPA;WACWG,wBAAa,KAAKK;;;mBAX5BH;EAAYY,YAAY;;2BAF5BX,qBAAc\",\"sourcesContent\":[\"import { customElement } from '@simple-html/core';\\r\\nimport { html } from 'lit-html';\\r\\n\\r\\nimport { property, attribute } from '@simple-html/core';\\r\\nimport { viewState } from '../state/viewState';\\r\\n\\r\\n@customElement('sample-no3')\\r\\nexport default class extends HTMLElement {\\r\\n    @property() count = 0;\\r\\n\\r\\n    render() {\\r\\n        const [view] = viewState();\\r\\n        return html` <span class=\\\"text-xl\\\">${view.toUpperCase()}</span>\\r\\n            <p class=\\\"mt-2 mb-2\\\">\\r\\n                Shows how to use @property and @attribute to trigger rerendering on changes\\r\\n            </p>\\r\\n            <p class=\\\"mt-2 mb-2\\\">Edit and go to sample 1</p>\\r\\n\\r\\n            <div class=\\\"flex flex-col\\\">\\r\\n                <button\\r\\n                    class=\\\"bg-green-500 p-2 w-56\\\"\\r\\n                    @click=${() => {\\r\\n                        this.count = this.count + 1;\\r\\n                    }}\\r\\n                >\\r\\n                    count ++\\r\\n                </button>\\r\\n\\r\\n                <span>ele-one - using property decorator - auto rerender</span>\\r\\n                <ele-1 .myvalue=${this.count}></ele-1>\\r\\n\\r\\n                <span>ele-two- using attribute decorator - auto rerender</span>\\r\\n                <ele-2 my-value=${this.count}></ele-2>\\r\\n\\r\\n                <span>ele-one - using property decorator - manual rerender delayed</span>\\r\\n                <ele-3 .myvalue=${this.count}></ele-3>\\r\\n\\r\\n                <span>ele-two- using attribute decorator - manual rerender delayed</span>\\r\\n                <ele-4 my-value=${this.count}></ele-4>\\r\\n            </div>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-1></ele-1>\\r\\n */\\r\\n@customElement('ele-1')\\r\\nexport class Ele1 extends HTMLElement {\\r\\n    @property() myvalue = 0;\\r\\n\\r\\n    render() {\\r\\n        return html`<span>${this.myvalue}</span>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-2></ele-2>\\r\\n */\\r\\n@customElement('ele-2')\\r\\nexport class Ele2 extends HTMLElement {\\r\\n    @attribute() myValue = 0;\\r\\n\\r\\n    render() {\\r\\n        return html`<span>${this.myValue}</span>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-3></ele-3>\\r\\n */\\r\\n@customElement('ele-3')\\r\\nexport class Ele3 extends HTMLElement {\\r\\n    @property({ skipRender: true }) myvalue = 0;\\r\\n\\r\\n    valuesChanged(type: string, propertyName: string, oldValue: any, newValue: any) {\\r\\n        console.log(type, propertyName, oldValue, newValue);\\r\\n        //small delay see it\\r\\n        setTimeout(() => {\\r\\n            this.render();\\r\\n        }, 700);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return html`<span>${this.myvalue}</span>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-4></ele-4>\\r\\n */\\r\\n@customElement('ele-4')\\r\\nexport class Ele4F extends HTMLElement {\\r\\n    @attribute({ skipRender: true }) myValue = 0;\\r\\n\\r\\n    valuesChanged(type: string, propertyName: string, oldValue: any, newValue: any) {\\r\\n        console.log(type, propertyName, oldValue, newValue);\\r\\n        //small delay see it\\r\\n        setTimeout(() => {\\r\\n            this.render();\\r\\n        }, 1000);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return html`<span>${this.myValue}</span>`;\\r\\n    }\\r\\n}\\r\\n\"]}"}