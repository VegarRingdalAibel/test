{"contents":"var __fuse_decorate = __fusereq(10);\nexports.__esModule = true;\nvar core_1 = __fusereq(42);\nvar lit_html_1 = __fusereq(11);\nvar core_2 = __fusereq(42);\nvar viewState_1 = __fusereq(53);\nlet __DefaultExport__ = class __DefaultExport__ extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.ele5 = 0;\n    this.ele6 = 0;\n    this.ele7 = 0;\n  }\n  connectedCallback() {\n    core_2.subscribe('ele-5', this, newValue => {\n      this.ele5 = newValue;\n    });\n    core_2.subscribe('ele-6', this, newValue => {\n      this.ele6 = newValue;\n    });\n    core_2.subscribe('ele-7', this, newValue => {\n      this.ele7 = newValue;\n    });\n  }\n  disconnectedCallback() {\n    core_1.unSubscribe('ele5', this);\n    core_1.unSubscribe('ele6', this);\n    core_1.unSubscribe('ele7', this);\n  }\n  render() {\n    const [view] = viewState_1.viewState();\n    return lit_html_1.html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p class=\"mt-2 mb-2\">\r\n                Shows send data between elements, some elements arn always connected, so this will\r\n                help with this if you do not want to create a state container\r\n            </p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"flex flex-col\">\r\n                <span>ele-5-external: ${this.ele5}</span>\r\n                <span>ele-6-external: ${this.ele6}</span>\r\n                <span>ele-7-external: ${this.ele7}</span>\r\n\r\n                <button\r\n                    class=\"bg-green-500 p-2 w-56\"\r\n                    @click=${() => {\n      core_2.publish('update');\n    }}\r\n                >\r\n                    publish all +1 to all\r\n                </button>\r\n\r\n                <ele-5 class=\"flex flex-col w-56 bg-indigo-200 mt-2\"></ele-5>\r\n\r\n                <ele-6 class=\"flex flex-col w-56 bg-indigo-400 mt-2\"></ele-6>\r\n\r\n                <ele-7 class=\"flex flex-col w-56 bg-indigo-300 mt-2\"></ele-7>\r\n            </div>`;\n  }\n};\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], __DefaultExport__.prototype, \"ele5\", void 0);\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], __DefaultExport__.prototype, \"ele6\", void 0);\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], __DefaultExport__.prototype, \"ele7\", void 0);\n__DefaultExport__ = __fuse_decorate.d([core_1.customElement('sample-no4')], __DefaultExport__);\nexports.default = __DefaultExport__;\nlet Ele5 = class Ele5 extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.count = 0;\n  }\n  connectedCallback() {\n    core_2.subscribe('update', this, () => {\n      this.count++;\n    });\n  }\n  disconnectedCallback() {\n    core_1.unSubscribe('update', this);\n  }\n  render() {\n    return lit_html_1.html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\n      this.count++;\n      core_2.publish('ele-5', this.count);\n    }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\n  }\n};\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], Ele5.prototype, \"count\", void 0);\nEle5 = __fuse_decorate.d([core_1.customElement('ele-5')], Ele5);\nexports.Ele5 = Ele5;\nlet Ele6 = class Ele6 extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.count = 0;\n  }\n  connectedCallback() {\n    core_2.subscribe('update', this, () => {\n      this.count++;\n    });\n  }\n  disconnectedCallback() {\n    core_1.unSubscribe('update', this);\n  }\n  render() {\n    return lit_html_1.html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\n      this.count++;\n      core_2.publish('ele-6', this.count);\n    }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\n  }\n};\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], Ele6.prototype, \"count\", void 0);\nEle6 = __fuse_decorate.d([core_1.customElement('ele-6')], Ele6);\nexports.Ele6 = Ele6;\nlet Ele7 = class Ele7 extends HTMLElement {\n  constructor() {\n    super(...arguments);\n    this.count = 0;\n  }\n  connectedCallback() {\n    core_2.subscribe('update', this, () => {\n      this.count++;\n    });\n  }\n  disconnectedCallback() {\n    core_1.unSubscribe('update', this);\n  }\n  render() {\n    return lit_html_1.html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\n      this.count++;\n      core_2.publish('ele-7', this.count);\n    }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\n  }\n};\n__fuse_decorate.d([core_2.property(), __fuse_decorate.m(\"design:type\", Object)], Ele7.prototype, \"count\", void 0);\nEle7 = __fuse_decorate.d([core_1.customElement('ele-7')], Ele7);\nexports.Ele7 = Ele7;\n","sourceMap":"{\"version\":3,\"sources\":[\"src/elements/sample-no4.ts\"],\"names\":[\"HTMLElement\",\"ele5\",\"ele6\",\"ele7\",\"connectedCallback\",\"core_2\",\"newValue\",\"disconnectedCallback\",\"core_1\",\"render\",\"view\",\"viewState_1\",\"lit_html_1\",\"toUpperCase\",\"count\"],\"mappings\":\";;;;;;wBAOe,gCAAcA;;;SACbC,OAAO;SACPC,OAAO;SACPC,OAAO;;EAEnBC;IAEIC,iBAAU,SAAS,MAAM,AAACC;MACtB,KAAKL,OAAOK;;IAEhBD,iBAAU,SAAS,MAAM,AAACC;MACtB,KAAKJ,OAAOI;;IAEhBD,iBAAU,SAAS,MAAM,AAACC;MACtB,KAAKH,OAAOG;;;EAIpBC;IACIC,mBAAY,QAAQ;IACpBA,mBAAY,QAAQ;IACpBA,mBAAY,QAAQ;;EAGxBC;WACWC,QAAQC;WACRC,yCAA8BF,KAAKG;;;;;;;;ycAQV,KAAKZ;ogBACL,KAAKC;+jBACL,KAAKC;;;;6rBAIhB;MACLE,eAAQ;;;;;;;;;;;;;;mBAxC3BA;mBACAA;mBACAA;uCAJJG,qBAAc;;WA6DR,mBAAmBR;;;SACVc,QAAQ;;EAEpBV;IACIC,iBAAU,UAAU,MAAM;MACtB,KAAKS;;;EAIbP;IACIC,mBAAY,UAAU;;EAG1BC;WACWG,kCAAuB,KAAKE;;;6JAGlB;MACL,KAAKA;MACLT,eAAQ,SAAS,KAAKS;;;;;;;;mBAlBrCT;0BAFJG,qBAAc;;WAkCR,mBAAmBR;;;SACVc,QAAQ;;EAEpBV;IACIC,iBAAU,UAAU,MAAM;MACtB,KAAKS;;;EAIbP;IACIC,mBAAY,UAAU;;EAG1BC;WACWG,kCAAuB,KAAKE;;;6JAGlB;MACL,KAAKA;MACLT,eAAQ,SAAS,KAAKS;;;;;;;;mBAlBrCT;0BAFJG,qBAAc;;WAkCR,mBAAmBR;;;SACVc,QAAQ;;EAEpBV;IACIC,iBAAU,UAAU,MAAM;MACtB,KAAKS;;;EAIbP;IACIC,mBAAY,UAAU;;EAG1BC;WACWG,kCAAuB,KAAKE;;;6JAGlB;MACL,KAAKA;MACLT,eAAQ,SAAS,KAAKS;;;;;;;;mBAlBrCT;0BAFJG,qBAAc\",\"sourcesContent\":[\"import { customElement, unSubscribe } from '@simple-html/core';\\r\\nimport { html } from 'lit-html';\\r\\n\\r\\nimport { property, publish, subscribe } from '@simple-html/core';\\r\\nimport { viewState } from '../state/viewState';\\r\\n\\r\\n@customElement('sample-no4')\\r\\nexport default class extends HTMLElement {\\r\\n    @property() ele5 = 0;\\r\\n    @property() ele6 = 0;\\r\\n    @property() ele7 = 0;\\r\\n\\r\\n    connectedCallback() {\\r\\n        // you could use 1 here and pass name back..\\r\\n        subscribe('ele-5', this, (newValue: any) => {\\r\\n            this.ele5 = newValue;\\r\\n        });\\r\\n        subscribe('ele-6', this, (newValue: any) => {\\r\\n            this.ele6 = newValue;\\r\\n        });\\r\\n        subscribe('ele-7', this, (newValue: any) => {\\r\\n            this.ele7 = newValue;\\r\\n        });\\r\\n    }\\r\\n\\r\\n    disconnectedCallback() {\\r\\n        unSubscribe('ele5', this);\\r\\n        unSubscribe('ele6', this);\\r\\n        unSubscribe('ele7', this);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        const [view] = viewState();\\r\\n        return html` <span class=\\\"text-xl\\\">${view.toUpperCase()}</span>\\r\\n            <p class=\\\"mt-2 mb-2\\\">\\r\\n                Shows send data between elements, some elements arn always connected, so this will\\r\\n                help with this if you do not want to create a state container\\r\\n            </p>\\r\\n            <p class=\\\"mt-2 mb-2\\\">Edit and go to sample 1</p>\\r\\n\\r\\n            <div class=\\\"flex flex-col\\\">\\r\\n                <span>ele-5-external: ${this.ele5}</span>\\r\\n                <span>ele-6-external: ${this.ele6}</span>\\r\\n                <span>ele-7-external: ${this.ele7}</span>\\r\\n\\r\\n                <button\\r\\n                    class=\\\"bg-green-500 p-2 w-56\\\"\\r\\n                    @click=${() => {\\r\\n                        publish('update');\\r\\n                    }}\\r\\n                >\\r\\n                    publish all +1 to all\\r\\n                </button>\\r\\n\\r\\n                <ele-5 class=\\\"flex flex-col w-56 bg-indigo-200 mt-2\\\"></ele-5>\\r\\n\\r\\n                <ele-6 class=\\\"flex flex-col w-56 bg-indigo-400 mt-2\\\"></ele-6>\\r\\n\\r\\n                <ele-7 class=\\\"flex flex-col w-56 bg-indigo-300 mt-2\\\"></ele-7>\\r\\n            </div>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-1></ele-1>\\r\\n */\\r\\n@customElement('ele-5')\\r\\nexport class Ele5 extends HTMLElement {\\r\\n    @property() count = 0;\\r\\n\\r\\n    connectedCallback() {\\r\\n        subscribe('update', this, () => {\\r\\n            this.count++;\\r\\n        });\\r\\n    }\\r\\n\\r\\n    disconnectedCallback() {\\r\\n        unSubscribe('update', this);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return html`<span>internal: ${this.count}</span>\\r\\n            <button\\r\\n                class=\\\"p-2 m-2 bg-green-500\\\"\\r\\n                @click=${() => {\\r\\n                    this.count++;\\r\\n                    publish('ele-5', this.count);\\r\\n                }}\\r\\n            >\\r\\n                1+ and <br />\\r\\n                send back current count\\r\\n            </button>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-2></ele-2>\\r\\n */\\r\\n\\r\\n@customElement('ele-6')\\r\\nexport class Ele6 extends HTMLElement {\\r\\n    @property() count = 0;\\r\\n\\r\\n    connectedCallback() {\\r\\n        subscribe('update', this, () => {\\r\\n            this.count++;\\r\\n        });\\r\\n    }\\r\\n\\r\\n    disconnectedCallback() {\\r\\n        unSubscribe('update', this);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return html`<span>internal: ${this.count}</span>\\r\\n            <button\\r\\n                class=\\\"p-2 m-2 bg-green-500\\\"\\r\\n                @click=${() => {\\r\\n                    this.count++;\\r\\n                    publish('ele-6', this.count);\\r\\n                }}\\r\\n            >\\r\\n                1+ and <br />\\r\\n                send back current count\\r\\n            </button>`;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * <ele-4></ele-4>\\r\\n */\\r\\n\\r\\n@customElement('ele-7')\\r\\nexport class Ele7 extends HTMLElement {\\r\\n    @property() count = 0;\\r\\n\\r\\n    connectedCallback() {\\r\\n        subscribe('update', this, () => {\\r\\n            this.count++;\\r\\n        });\\r\\n    }\\r\\n\\r\\n    disconnectedCallback() {\\r\\n        unSubscribe('update', this);\\r\\n    }\\r\\n\\r\\n    render() {\\r\\n        return html`<span>internal: ${this.count}</span>\\r\\n            <button\\r\\n                class=\\\"p-2 m-2 bg-green-500\\\"\\r\\n                @click=${() => {\\r\\n                    this.count++;\\r\\n                    publish('ele-7', this.count);\\r\\n                }}\\r\\n            >\\r\\n                1+ and <br />\\r\\n                send back current count\\r\\n            </button>`;\\r\\n    }\\r\\n}\\r\\n\"]}"}