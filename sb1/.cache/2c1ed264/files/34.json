{"contents":"exports.__esModule = true;\nvar hmrCache_1 = __fusereq(33);\nvar createHookClass_1 = __fusereq(38);\nvar constructInstance_1 = __fusereq(39);\nfunction overrideCustomElementDefine() {\n  if (!hmrCache_1.isCacheInitialized()) {\n    hmrCache_1.setCacheAsInitialized();\n    const originalDefineFn = CustomElementRegistry.prototype.define;\n    CustomElementRegistry.prototype.define = function (elementName, impl, options) {\n      const registeredCustomElement = customElements.get(elementName);\n      impl[hmrCache_1.getSymbolAttributes(elementName)] = impl.observedAttributes;\n      hmrCache_1.setMostRecentImpl(elementName, impl);\n      if (!registeredCustomElement) {\n        const hookClass = new Proxy(createHookClass_1.createHookClass(elementName, impl), {\n          construct: function (element, args, newTarget) {\n            const mostRecentImpl = hmrCache_1.getMostRecentImpl(elementName);\n            return constructInstance_1.constructInstance(mostRecentImpl, args, newTarget);\n          }\n        });\n        originalDefineFn.apply(this, [elementName, hookClass, options]);\n      } else {\n        const onCustomElementChange = globalThis.hmrCache.onCustomElementChange;\n        if (onCustomElementChange && typeof onCustomElementChange === 'function') {\n          onCustomElementChange(elementName, impl, options);\n        }\n      }\n    };\n  }\n}\nexports.overrideCustomElementDefine = overrideCustomElementDefine;\n"}