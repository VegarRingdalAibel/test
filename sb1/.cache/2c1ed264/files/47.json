{"contents":"exports.__esModule = true;\nvar lit_html_1 = __fusereq(11);\nvar symbols_1 = __fusereq(54);\nvar logger_1 = __fusereq(45);\nfunction customElement(elementName, extended) {\n  return function reg(elementClass) {\n    const observedAttributes = elementClass.observedAttributes;\n    Object.defineProperty(elementClass, 'observedAttributes', {\n      set: function (value) {\n        elementClass.prototype[symbols_1.getObservedAttributesSymbol()] = value;\n        return true;\n      },\n      get: function () {\n        return elementClass.prototype[symbols_1.getObservedAttributesSymbol()];\n      },\n      configurable: true\n    });\n    if (Array.isArray(observedAttributes) && Array.isArray(elementClass.observedAttributes)) {\n      elementClass.observedAttributes = elementClass.observedAttributes.concat(observedAttributes);\n    }\n    if (Array.isArray(observedAttributes) && !Array.isArray(elementClass.observedAttributes)) {\n      elementClass.observedAttributes = observedAttributes;\n    }\n    const Base = class extends elementClass {\n      constructor() {\n        super();\n        logger_1.logger('constructor', this, super.tagName);\n      }\n      render(...result) {\n        logger_1.logger('render', this, super.tagName);\n        const template = super.render.call(this, ...result);\n        Promise.resolve(template).then(templates => {\n          lit_html_1.render(templates, this, {\n            eventContext: this\n          });\n          if (super.updated) {\n            requestAnimationFrame(() => {\n              super.updated();\n            });\n          }\n        });\n      }\n      connectedCallback() {\n        logger_1.logger('connectedCallback', this, super.tagName);\n        if (super.connectedCallback) {\n          super.connectedCallback.call(this);\n        }\n        this.render(this);\n      }\n      register(call) {\n        if (this.callers) {\n          this.callers.push(call);\n        } else {\n          this.callers = [];\n          this.callers.push(call);\n        }\n      }\n      disconnectedCallback() {\n        logger_1.logger('disconnectedCallback', this, super.tagName);\n        if (this.callers) {\n          this.callers.forEach(call => call());\n        }\n        this.callers = [];\n        if (super.disconnectedCallback) {\n          super.disconnectedCallback.call(this);\n        }\n      }\n      attributeChangedCallback(name, oldValue, newValue) {\n        logger_1.logger('attributeChangedCallback', this, super.tagName);\n        if (!this[symbols_1.getObservedAttributesMapSymbol()]) {\n          const attribute = name.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\\s+/g, '-').toLowerCase();\n          this[symbols_1.getObservedAttributesMapSymbol()] = new Map();\n          this[symbols_1.getObservedAttributesMapSymbol()].set(attribute, name);\n        }\n        const nameProp = this[symbols_1.getObservedAttributesMapSymbol()].get(name);\n        this[nameProp] = newValue || '';\n        if (super.attributeChangedCallback) {\n          super.attributeChangedCallback.call(this, name, oldValue, newValue);\n        }\n        if (super.valuesChanged) {\n          super.valuesChanged('attribute', name, oldValue, newValue);\n        }\n      }\n    };\n    if (!customElements.get(elementName)) {\n      if (extended) {\n        customElements.define(elementName, Base, extended);\n      } else {\n        customElements.define(elementName, Base);\n      }\n    } else {\n      if (globalThis.hmrCache) {\n        if (extended) {\n          customElements.define(elementName, Base, extended);\n        } else {\n          customElements.define(elementName, Base);\n        }\n      }\n    }\n  };\n}\nexports.customElement = customElement;\n"}