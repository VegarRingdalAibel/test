{"contents":"exports.__esModule = true;\nvar symbols_1 = __fusereq(54);\nlet log = false;\nlet skipElements = [];\nif (!globalThis[symbols_1.getLoggerSymbol()]) {\n  globalThis[symbols_1.getLoggerSymbol()] = new WeakMap();\n  globalThis[symbols_1.getLoggerCountSymbol()] = 0;\n}\nfunction enableInternalLogger(skip = []) {\n  skipElements = skip;\n  log = true;\n}\nexports.enableInternalLogger = enableInternalLogger;\nfunction disableInternalLogger() {\n  log = false;\n}\nexports.disableInternalLogger = disableInternalLogger;\nfunction registerLoggerContext(context) {\n  if (log) {\n    const map = globalThis[symbols_1.getLoggerSymbol()];\n    if (map.has(context)) {\n      throw 'contxt duplicate';\n    }\n    const count = globalThis[symbols_1.getLoggerCountSymbol()] + 1;\n    globalThis[symbols_1.getLoggerCountSymbol()] = count;\n    map.set(context, count);\n  }\n}\nfunction getID(ctx) {\n  if (log) {\n    const map = globalThis[symbols_1.getLoggerSymbol()];\n    return map.get(ctx);\n  }\n}\nfunction logger(name, ctx, tag) {\n  if (log && skipElements.indexOf(tag) === -1) {\n    let id = getID(ctx);\n    if (!id) {\n      registerLoggerContext(ctx);\n    }\n    id = getID(ctx);\n    const text = name || '??' + '' + (id || '?');\n    const x = 25 - Math.floor(text.length);\n    const idOnly = '' + (id || '?');\n    const y = 6 - Math.floor(idOnly.length);\n    console.log(`@SIMPLE-HTML/core | ${name}${Array(x).join(' ')}| id:${id || '?'}${Array(y).join(' ')} | IsConnected:${ctx && ctx.isConnected === true ? 'Y' : 'N'} |  ${tag}`);\n  }\n}\nexports.logger = logger;\n"}