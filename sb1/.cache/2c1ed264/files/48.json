{"contents":"exports.__esModule = true;\nvar symbols_1 = __fusereq(54);\nif (!globalThis[symbols_1.getTransmitterSymbol()]) {\n  globalThis[symbols_1.getTransmitterSymbol()] = {};\n}\nfunction transmitter() {\n  return globalThis[symbols_1.getTransmitterSymbol()];\n}\nfunction publish(channel, ...args) {\n  Promise.resolve().then(() => {\n    if (Array.isArray(transmitter()[channel])) {\n      for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\n        const ctx = transmitter()[channel][i].ctx;\n        transmitter()[channel][i].func.apply(ctx, args);\n      }\n    }\n  });\n}\nexports.publish = publish;\nfunction publishSync(channel, ...args) {\n  if (Array.isArray(transmitter()[channel])) {\n    for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\n      const ctx = transmitter()[channel][i].ctx;\n      transmitter()[channel][i].func.apply(ctx, args);\n    }\n  }\n}\nexports.publishSync = publishSync;\nfunction publishNext(channel, ...args) {\n  setTimeout(() => {\n    if (Array.isArray(transmitter()[channel])) {\n      for (let i = 0, len = transmitter()[channel].length; i < len; i++) {\n        const ctx = transmitter()[channel][i].ctx;\n        transmitter()[channel][i].func.apply(ctx, args);\n      }\n    }\n  }, 0);\n}\nexports.publishNext = publishNext;\nfunction unSubscribe(channel, ctx) {\n  if (Array.isArray(transmitter()[channel])) {\n    const events = transmitter()[channel].filter(event => {\n      if (event.ctx !== ctx) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    transmitter()[channel] = events;\n  }\n}\nexports.unSubscribe = unSubscribe;\nfunction subscribe(channel, ctx, func) {\n  if (!Array.isArray(transmitter()[channel])) {\n    transmitter()[channel] = [];\n  }\n  transmitter()[channel].push({\n    ctx: ctx,\n    func: func\n  });\n}\nexports.subscribe = subscribe;\n"}