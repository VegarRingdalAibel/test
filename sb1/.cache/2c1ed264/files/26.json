{"contents":"exports.__esModule = true;\nvar dom_js_1 = __fusereq(20);\nvar template_js_1 = __fusereq(27);\nconst commentMarker = ` ${template_js_1.marker} `;\nclass TemplateResult {\n  constructor(strings, values, type, processor) {\n    this.strings = strings;\n    this.values = values;\n    this.type = type;\n    this.processor = processor;\n  }\n  getHTML() {\n    const l = this.strings.length - 1;\n    let html = '';\n    let isCommentBinding = false;\n    for (let i = 0; i < l; i++) {\n      const s = this.strings[i];\n      const commentOpen = s.lastIndexOf('<!--');\n      isCommentBinding = (commentOpen > -1 || isCommentBinding) && s.indexOf('-->', commentOpen + 1) === -1;\n      const attributeMatch = template_js_1.lastAttributeNameRegex.exec(s);\n      if (attributeMatch === null) {\n        html += s + (isCommentBinding ? commentMarker : template_js_1.nodeMarker);\n      } else {\n        html += s.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + template_js_1.boundAttributeSuffix + attributeMatch[3] + template_js_1.marker;\n      }\n    }\n    html += this.strings[l];\n    return html;\n  }\n  getTemplateElement() {\n    const template = document.createElement('template');\n    template.innerHTML = this.getHTML();\n    return template;\n  }\n}\nexports.TemplateResult = TemplateResult;\nclass SVGTemplateResult extends TemplateResult {\n  getHTML() {\n    return `<svg>${super.getHTML()}</svg>`;\n  }\n  getTemplateElement() {\n    const template = super.getTemplateElement();\n    const content = template.content;\n    const svgElement = content.firstChild;\n    content.removeChild(svgElement);\n    dom_js_1.reparentNodes(content, svgElement.firstChild);\n    return template;\n  }\n}\nexports.SVGTemplateResult = SVGTemplateResult;\n"}