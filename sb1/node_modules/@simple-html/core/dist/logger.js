import { getLoggerSymbol, getLoggerCountSymbol } from './symbols';
let log = false;
let skipElements = [];
if (!globalThis[getLoggerSymbol()]) {
    globalThis[getLoggerSymbol()] = new WeakMap();
    globalThis[getLoggerCountSymbol()] = 0;
}
export function enableInternalLogger(skip = []) {
    skipElements = skip;
    log = true;
}
export function disableInternalLogger() {
    log = false;
}
function registerLoggerContext(context) {
    if (log) {
        const map = globalThis[getLoggerSymbol()];
        if (map.has(context)) {
            throw 'contxt duplicate';
        }
        const count = globalThis[getLoggerCountSymbol()] + 1;
        globalThis[getLoggerCountSymbol()] = count;
        map.set(context, count);
    }
}
function getID(ctx) {
    if (log) {
        const map = globalThis[getLoggerSymbol()];
        return map.get(ctx);
    }
}
export function logger(name, ctx, tag) {
    if (log && skipElements.indexOf(tag) === -1) {
        let id = getID(ctx);
        if (!id) {
            registerLoggerContext(ctx);
        }
        id = getID(ctx);
        const text = name || '??' + '' + (id || '?');
        const x = 25 - Math.floor(text.length);
        const idOnly = '' + (id || '?');
        const y = 6 - Math.floor(idOnly.length);
        console.log(`@SIMPLE-HTML/core | ${name}${Array(x).join(' ')}| id:${id || '?'}${Array(y).join(' ')} | IsConnected:${ctx && ctx.isConnected === true ? 'Y' : 'N'} |  ${tag}`);
    }
}
//# sourceMappingURL=logger.js.map