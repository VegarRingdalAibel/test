import { getTransmitterSymbol } from './symbols';
if (!globalThis[getTransmitterSymbol()]) {
    globalThis[getTransmitterSymbol()] = {};
}
function transmitter() {
    return globalThis[getTransmitterSymbol()];
}
export function publish(channel, ...args) {
    Promise.resolve().then(() => {
        if (Array.isArray(transmitter()[channel])) {
            for (let i = 0, len = transmitter()[channel].length; i < len; i++) {
                const ctx = transmitter()[channel][i].ctx;
                transmitter()[channel][i].func.apply(ctx, args);
            }
        }
    });
}
export function publishSync(channel, ...args) {
    if (Array.isArray(transmitter()[channel])) {
        for (let i = 0, len = transmitter()[channel].length; i < len; i++) {
            const ctx = transmitter()[channel][i].ctx;
            transmitter()[channel][i].func.apply(ctx, args);
        }
    }
}
export function publishNext(channel, ...args) {
    setTimeout(() => {
        if (Array.isArray(transmitter()[channel])) {
            for (let i = 0, len = transmitter()[channel].length; i < len; i++) {
                const ctx = transmitter()[channel][i].ctx;
                transmitter()[channel][i].func.apply(ctx, args);
            }
        }
    }, 0);
}
export function unSubscribe(channel, ctx) {
    if (Array.isArray(transmitter()[channel])) {
        const events = transmitter()[channel].filter((event) => {
            if (event.ctx !== ctx) {
                return true;
            }
            else {
                return false;
            }
        });
        transmitter()[channel] = events;
    }
}
export function subscribe(channel, ctx, func) {
    if (!Array.isArray(transmitter()[channel])) {
        transmitter()[channel] = [];
    }
    transmitter()[channel].push({ ctx: ctx, func: func });
}
//# sourceMappingURL=transmitter.js.map