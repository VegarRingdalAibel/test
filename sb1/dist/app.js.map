{"version":3,"sources":["src/fuseHmrPlugin.ts","src/hmr.ts","src/state/viewState.ts","src/elements/sample-default.ts","src/state/formState.ts","src/elements/sample-no1.ts","src/elements/sample-no4.ts","src/elements/sample-no3.ts","src/elements/sample-no2.ts","src/elements/getElementMarkup.ts","src/elements/app-root.ts","src/index.ts"],"names":["payload","helper","updates","window","dispatchEvent","CustomEvent","isStylesheeetUpdate","flushModules","updateModules","callModules","flushAll","callEntries","document","body","innerHTML","setTimeout","custom_elements_hmr_polyfill_1","NONE","core_2","exports","context","callback","core_1","defaultValue","HTMLElement","render","view","viewState_1","lit_html_1","toUpperCase","form","setForm","formState_1","firstName","e","Object","assign","target","value","lastName","ele5","ele6","ele7","connectedCallback","newValue","disconnectedCallback","count","myvalue","myValue","valuesChanged","type","propertyName","oldValue","console","log","skipRender","element","elements","setView","map","getElementMarkup_1"],"mappings":"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","file":"","sourcesContent":["import { HMRHelper, HMRPayload } from 'fuse-box/types/hmr';\nexport default function (payload: HMRPayload, helper: HMRHelper) {\n    const { updates } = payload;\n\n    window.dispatchEvent(new CustomEvent('HMR-FUSEBOX'));\n\n    if (helper.isStylesheeetUpdate) {\n        helper.flushModules(updates);\n\n        helper.updateModules();\n\n        helper.callModules(updates);\n    } else {\n        helper.flushAll();\n        helper.updateModules();\n\n        helper.callEntries();\n    }\n}\n","import { applyPolyfill, ReflowStrategy } from 'custom-elements-hmr-polyfill';\r\n\r\nif (document.body) {\r\n    // I just want every thing to be rebuild from main element during hmr\r\n    document.body.innerHTML = '';\r\n    setTimeout(() => {\r\n        document.body.innerHTML = '<app-root></app-root>';\r\n    }, 0);\r\n}\r\n\r\napplyPolyfill(ReflowStrategy.NONE);\r\n","import { subscribe, unSubscribe, disconnectedCallback } from '@simple-html/core';\nimport { validateKey, stateContainer, stateResult } from '@simple-html/core';\n\n/**\n * key and validate key, so we know we dont have duplicates\n */\nexport const STATE_KEY = 'VIEW_STATE';\nvalidateKey(STATE_KEY);\n\n/**\n * connect state\n */\nexport function connectViewState(context: HTMLElement, callback: Function): void {\n    // this register callback with simpleHtml elements disconnected callback\n    disconnectedCallback(context, () => unSubscribe(STATE_KEY, context));\n\n    // for following the event we just use the internal event handler\n    subscribe(STATE_KEY, context, callback);\n}\n\n/**\n * function to get state/state setter\n */\nexport type state = string;\nexport function viewState(defaultValue = '' as state): stateResult<state> {\n    return stateContainer<state>(STATE_KEY, defaultValue);\n}\n","import { customElement } from '@simple-html/core';\nimport { html } from 'lit-html';\nimport { viewState } from '../state/viewState';\n\n@customElement('sample-default')\nexport default class extends HTMLElement {\n    render() {\n        const [view] = viewState();\n        return html` <span class=\"text-xl\">${view.toUpperCase()}</span>\n            <p>Click on the buttons to the left to try different samples</p>\n            <p>\n                Core is very simple and olnly here to help write less code and make hmr work better\n            </p>\n            <p>\n                Swicthing views like this is ok for parts of application, but you should look at\n                router for better control\n            </p>`;\n    }\n}\n","import { subscribe, unSubscribe, disconnectedCallback } from '@simple-html/core';\r\nimport { validateKey, stateContainer, stateResult } from '@simple-html/core';\r\n\r\n/**\r\n * key and validate key, so we know we dont have duplicates\r\n */\r\nexport const STATE_KEY = 'FORM_STATE';\r\nvalidateKey(STATE_KEY);\r\n\r\n/**\r\n * connect state\r\n */\r\nexport function connectFormState(context: HTMLElement, callback: Function): void {\r\n    // this register callback with simpleHtml elements disconnected callback\r\n    disconnectedCallback(context, () => unSubscribe(STATE_KEY, context));\r\n\r\n    // for following the event we just use the internal event handler\r\n    subscribe(STATE_KEY, context, callback);\r\n}\r\n\r\n/**\r\n * function to get state/state setter\r\n */\r\nexport type state = { firstName: string; lastName: string };\r\nexport function formState(defaultValue = {} as state): stateResult<state> {\r\n    return stateContainer<state>(STATE_KEY, defaultValue);\r\n}\r\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\nimport { viewState } from '../state/viewState';\r\nimport { formState } from '../state/formState';\r\n\r\n@customElement('sample-no1')\r\nexport default class extends HTMLElement {\r\n    render() {\r\n        // get our state containers\r\n        const [view] = viewState();\r\n        const [form, setForm] = formState();\r\n\r\n        return html`\r\n            <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n\r\n            <p class=\"mt-2 mb-2\">Simple state management that works with hmr</p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 2</p>\r\n\r\n            <div class=\"m-auto flex flex-col\">\r\n                <label>\r\n                    FirstName:\r\n                    <input\r\n                        class=\"p-2 m-1\"\r\n                        .value=${form.firstName || ''}\r\n                        @input=${(e: any) =>\r\n                            setForm(Object.assign(form, { firstName: e.target.value }))}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    LastName:\r\n                    <input\r\n                        class=\"p-2 m-1\"\r\n                        .value=${form.lastName || ''}\r\n                        @input=${(e: any) =>\r\n                            setForm(Object.assign(form, { lastName: e.target.value }))}\r\n                    />\r\n                </label>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n","import { customElement, unSubscribe } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\n\r\nimport { property, publish, subscribe } from '@simple-html/core';\r\nimport { viewState } from '../state/viewState';\r\n\r\n@customElement('sample-no4')\r\nexport default class extends HTMLElement {\r\n    @property() ele5 = 0;\r\n    @property() ele6 = 0;\r\n    @property() ele7 = 0;\r\n\r\n    connectedCallback() {\r\n        // you could use 1 here and pass name back..\r\n        subscribe('ele-5', this, (newValue: any) => {\r\n            this.ele5 = newValue;\r\n        });\r\n        subscribe('ele-6', this, (newValue: any) => {\r\n            this.ele6 = newValue;\r\n        });\r\n        subscribe('ele-7', this, (newValue: any) => {\r\n            this.ele7 = newValue;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('ele5', this);\r\n        unSubscribe('ele6', this);\r\n        unSubscribe('ele7', this);\r\n    }\r\n\r\n    render() {\r\n        const [view] = viewState();\r\n        return html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p class=\"mt-2 mb-2\">\r\n                Shows send data between elements, some elements arn always connected, so this will\r\n                help with this if you do not want to create a state container\r\n            </p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"flex flex-col\">\r\n                <span>ele-5-external: ${this.ele5}</span>\r\n                <span>ele-6-external: ${this.ele6}</span>\r\n                <span>ele-7-external: ${this.ele7}</span>\r\n\r\n                <button\r\n                    class=\"bg-green-500 p-2 w-56\"\r\n                    @click=${() => {\r\n                        publish('update');\r\n                    }}\r\n                >\r\n                    publish all +1 to all\r\n                </button>\r\n\r\n                <ele-5 class=\"flex flex-col w-56 bg-indigo-200 mt-2\"></ele-5>\r\n\r\n                <ele-6 class=\"flex flex-col w-56 bg-indigo-400 mt-2\"></ele-6>\r\n\r\n                <ele-7 class=\"flex flex-col w-56 bg-indigo-300 mt-2\"></ele-7>\r\n            </div>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-1></ele-1>\r\n */\r\n@customElement('ele-5')\r\nexport class Ele5 extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    connectedCallback() {\r\n        subscribe('update', this, () => {\r\n            this.count++;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('update', this);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\r\n                    this.count++;\r\n                    publish('ele-5', this.count);\r\n                }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-2></ele-2>\r\n */\r\n\r\n@customElement('ele-6')\r\nexport class Ele6 extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    connectedCallback() {\r\n        subscribe('update', this, () => {\r\n            this.count++;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('update', this);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\r\n                    this.count++;\r\n                    publish('ele-6', this.count);\r\n                }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-4></ele-4>\r\n */\r\n\r\n@customElement('ele-7')\r\nexport class Ele7 extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    connectedCallback() {\r\n        subscribe('update', this, () => {\r\n            this.count++;\r\n        });\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        unSubscribe('update', this);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>internal: ${this.count}</span>\r\n            <button\r\n                class=\"p-2 m-2 bg-green-500\"\r\n                @click=${() => {\r\n                    this.count++;\r\n                    publish('ele-7', this.count);\r\n                }}\r\n            >\r\n                1+ and <br />\r\n                send back current count\r\n            </button>`;\r\n    }\r\n}\r\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\n\r\nimport { property, attribute } from '@simple-html/core';\r\nimport { viewState } from '../state/viewState';\r\n\r\n@customElement('sample-no3')\r\nexport default class extends HTMLElement {\r\n    @property() count = 0;\r\n\r\n    render() {\r\n        const [view] = viewState();\r\n        return html` <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n            <p class=\"mt-2 mb-2\">\r\n                Shows how to use @property and @attribute to trigger rerendering on changes\r\n            </p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"flex flex-col\">\r\n                <button\r\n                    class=\"bg-green-500 p-2 w-56\"\r\n                    @click=${() => {\r\n                        this.count = this.count + 1;\r\n                    }}\r\n                >\r\n                    count ++\r\n                </button>\r\n\r\n                <span>ele-one - using property decorator - auto rerender</span>\r\n                <ele-1 .myvalue=${this.count}></ele-1>\r\n\r\n                <span>ele-two- using attribute decorator - auto rerender</span>\r\n                <ele-2 my-value=${this.count}></ele-2>\r\n\r\n                <span>ele-one - using property decorator - manual rerender delayed</span>\r\n                <ele-3 .myvalue=${this.count}></ele-3>\r\n\r\n                <span>ele-two- using attribute decorator - manual rerender delayed</span>\r\n                <ele-4 my-value=${this.count}></ele-4>\r\n            </div>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-1></ele-1>\r\n */\r\n@customElement('ele-1')\r\nexport class Ele1 extends HTMLElement {\r\n    @property() myvalue = 0;\r\n\r\n    render() {\r\n        return html`<span>${this.myvalue}</span>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-2></ele-2>\r\n */\r\n@customElement('ele-2')\r\nexport class Ele2 extends HTMLElement {\r\n    @attribute() myValue = 0;\r\n\r\n    render() {\r\n        return html`<span>${this.myValue}</span>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-3></ele-3>\r\n */\r\n@customElement('ele-3')\r\nexport class Ele3 extends HTMLElement {\r\n    @property({ skipRender: true }) myvalue = 0;\r\n\r\n    valuesChanged(type: string, propertyName: string, oldValue: any, newValue: any) {\r\n        console.log(type, propertyName, oldValue, newValue);\r\n        //small delay see it\r\n        setTimeout(() => {\r\n            this.render();\r\n        }, 700);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>${this.myvalue}</span>`;\r\n    }\r\n}\r\n\r\n/**\r\n * <ele-4></ele-4>\r\n */\r\n@customElement('ele-4')\r\nexport class Ele4F extends HTMLElement {\r\n    @attribute({ skipRender: true }) myValue = 0;\r\n\r\n    valuesChanged(type: string, propertyName: string, oldValue: any, newValue: any) {\r\n        console.log(type, propertyName, oldValue, newValue);\r\n        //small delay see it\r\n        setTimeout(() => {\r\n            this.render();\r\n        }, 1000);\r\n    }\r\n\r\n    render() {\r\n        return html`<span>${this.myValue}</span>`;\r\n    }\r\n}\r\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\nimport { viewState } from '../state/viewState';\r\nimport { formState } from '../state/formState';\r\n\r\n@customElement('sample-no2')\r\nexport default class extends HTMLElement {\r\n    render() {\r\n        // get our state containers\r\n        const [view] = viewState();\r\n        const [form, setForm] = formState();\r\n\r\n        return html`\r\n            <span class=\"text-xl\">${view.toUpperCase()}</span>\r\n\r\n            <p class=\"mt-2 mb-2\">Simple state management that works with hmr</p>\r\n            <p class=\"mt-2 mb-2\">Edit and go to sample 1</p>\r\n\r\n            <div class=\"m-auto flex flex-col\">\r\n                <label>\r\n                    FirstName:\r\n                    <input\r\n                        class=\"p-2 m-1\"\r\n                        .value=${form.firstName || ''}\r\n                        @input=${(e: any) =>\r\n                            setForm(Object.assign(form, { firstName: e.target.value }))}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    LastName:\r\n                    <input\r\n                        class=\"p-2 m-1\"\r\n                        .value=${form.lastName || ''}\r\n                        @input=${(e: any) =>\r\n                            setForm(Object.assign(form, { lastName: e.target.value }))}\r\n                    />\r\n                </label>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n","import { html } from 'lit-html';\nimport './sample-default';\nimport './sample-no1';\nimport './sample-no2';\nimport './sample-no3';\nimport './sample-no4';\n\nexport function getElementMarkup(element: string) {\n    switch (element) {\n        case 'sample-no1':\n            return html`<sample-no1></sample-no1>`;\n        case 'sample-no2':\n            return html`<sample-no2></sample-no2>`;\n        case 'sample-no3':\n            return html`<sample-no3></sample-no3>`;\n        case 'sample-no4':\n            return html`<sample-no4></sample-no4>`;\n        default:\n            return html`<sample-default></sample-default>`;\n    }\n}\n","import { customElement } from '@simple-html/core';\r\nimport { html } from 'lit-html';\r\nimport { connectViewState, viewState } from '../state/viewState';\r\nimport { getElementMarkup } from './getElementMarkup';\r\n\r\n@customElement('app-root')\r\nexport default class extends HTMLElement {\r\n    elements = ['sample-default', 'sample-no1', 'sample-no2', 'sample-no3', 'sample-no4'];\r\n\r\n    connectedCallback() {\r\n        connectViewState(this, this.render);\r\n    }\r\n\r\n    render() {\r\n        const [view, setView] = viewState('element-default');\r\n        return html`<section class=\"flex flex-row flex-grow h-full\">\r\n            <div class=\"bg-gray-200 flex flex-col\">\r\n                ${this.elements.map((element) => {\r\n                    return html`<button\r\n                        class=\"p-2 m-2 bg-indigo-300\"\r\n                        @click=${() => setView(element)}\r\n                    >\r\n                        ${element}\r\n                    </button>`;\r\n                })}\r\n            </div>\r\n            <div class=\"bg-gray-300 flex-grow h-full p-2\">${getElementMarkup(view)}</div>\r\n        </section>`;\r\n    }\r\n}\r\n","import './hmr';\r\nimport './index.css';\r\n\r\nimport { enableInternalLogger } from '@simple-html/core';\r\nenableInternalLogger();\r\n\r\nimport './elements/app-root';\r\n"]}