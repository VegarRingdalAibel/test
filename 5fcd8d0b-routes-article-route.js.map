{"version":3,"sources":["/samples/realworld-sample/src/routes/article-route.ts","/samples/realworld-sample/src/components/comment-section.ts","/samples/realworld-sample/src/resources/services/commentservice.ts"],"names":["lit_html_1","$fsx","r","core_1","articleservice_1","commentservice_1","userservice_1","sharedstate_1","profileservice_1","unsafe_html_js_1","marked","router_1","default_1","HTMLElement","[object Object]","super","this","comments","articleService","instance","ArticleService","commentService","CommentService","userService","UserService","sharedState","SharedState","profileService","ProfileService","_route","params","_routeConfig","slug","article","get","getList","isAuthenticated","favorited","favoritesCount","favorite","unfavorite","render","location","hash","author","following","follow","username","unfollow","comment","add","myComment","push","canModify","currentUser","destroy","commentId","value","markup","renderer","Renderer","console","log","html","title","articleMeta","call","unsafeHTML","markedhtml","body","e","target","image","postComment","map","id","deleteComment","href","name","date","createdAt","Date","toLocaleDateString","month","day","year","deleteArticle","onToggleFollowing","onToggleFavorited","tslib_1","__decorate","customElement","deleteCb","apiservice_1","exports","apiService","ApiService","payload","post","articleSlug","delete"],"mappings":"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","file":"5fcd8d0b-routes-article-route","sourcesContent":["import { html } from 'lit-html';\r\nimport '../components/comment-section';\r\nimport { customElement, instance } from '@lit-html-free/core';\r\nimport { ArticleService } from 'src/resources/services/articleservice';\r\nimport { CommentService } from 'src/resources/services/commentservice';\r\nimport { UserService } from 'src/resources/services/userservice';\r\nimport { SharedState } from 'src/resources/state/sharedstate';\r\nimport { ProfileService } from 'src/resources/services/profileservice';\r\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html.js';\r\nimport * as marked from 'marked';\r\nimport { href } from '@lit-html-free/router';\r\n\r\nfunction format(date: Date) {\r\n    return new Date(date).toLocaleDateString('en', {\r\n        month: 'long',\r\n        day: '2-digit',\r\n        year: 'numeric'\r\n    });\r\n}\r\n\r\n@customElement('article-comp')\r\nexport default class extends HTMLElement {\r\n    public article: any;\r\n    public comments: any = [];\r\n    public myComment: any;\r\n    public routeConfig: any;\r\n    public slug: any;\r\n\r\n    public articleService: ArticleService;\r\n    public commentService: CommentService;\r\n    public userService: UserService;\r\n    public sharedState: SharedState;\r\n    public profileService: ProfileService;\r\n\r\n    constructor() {\r\n        super();\r\n        this.articleService = instance(ArticleService);\r\n        this.commentService = instance(CommentService);\r\n        this.userService = instance(UserService);\r\n        this.sharedState = instance(SharedState);\r\n        this.profileService = instance(ProfileService);\r\n    }\r\n\r\n    public async activate(_route: string, params: any, _routeConfig: any) {\r\n        this.slug = params.slug;\r\n        this.article = await this.articleService.get(this.slug);\r\n        this.comments = (await this.commentService.getList(this.slug)) || [];\r\n    }\r\n\r\n    public onToggleFavorited() {\r\n        if (this.sharedState.isAuthenticated) {\r\n            this.article.favorited = !this.article.favorited;\r\n            if (this.article.favorited) {\r\n                this.article.favoritesCount++;\r\n                this.articleService.favorite(this.article.slug);\r\n            } else {\r\n                this.article.favoritesCount--;\r\n                this.articleService.unfavorite(this.article.slug);\r\n            }\r\n            this.render();\r\n        } else {\r\n            location.hash = 'login';\r\n        }\r\n    }\r\n\r\n    public onToggleFollowing() {\r\n        if (this.sharedState.isAuthenticated) {\r\n            this.article.author.following = !this.article.author.following;\r\n            if (this.article.author.following) {\r\n                this.profileService.follow(this.article.author.username);\r\n            } else {\r\n                this.profileService.unfollow(this.article.author.username);\r\n            }\r\n            this.render();\r\n        } else {\r\n            location.hash = 'login';\r\n        }\r\n    }\r\n\r\n    public async postComment() {\r\n        const comment = await this.commentService.add(this.slug, this.myComment);\r\n        this.comments.push(comment);\r\n        this.myComment = '';\r\n        this.render();\r\n    }\r\n\r\n    get canModify() {\r\n        return this.sharedState.currentUser && this.article.author.username === this.sharedState.currentUser.username;\r\n    }\r\n\r\n    public async deleteArticle() {\r\n        await this.articleService.destroy(this.article.slug);\r\n        location.hash = 'home';\r\n        this.render();\r\n    }\r\n\r\n    public async deleteComment(commentId: any) {\r\n        await this.commentService.destroy(commentId, this.slug);\r\n        this.comments = await this.commentService.getList(this.slug);\r\n        this.render();\r\n    }\r\n\r\n    public markedhtml(value: any) {\r\n        let markup: string;\r\n        if (value) {\r\n            const renderer = new marked.Renderer();\r\n            markup = marked(value, { renderer: renderer });\r\n        } else {\r\n            markup = '';\r\n        }\r\n\r\n        return markup;\r\n    }\r\n\r\n    public render() {\r\n        console.log('loaded');\r\n        return html`\r\n            <div class=\"article-page\">\r\n                <div class=\"banner\">\r\n                    <div class=\"container\">\r\n                        <h1>${this.article.title}</h1>\r\n                        <!--   just to stop repeating myself -->\r\n                        ${articleMeta.call(this)}\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"container page\">\r\n                    <div class=\"row article-content\">\r\n                        <div class=\"col-md-12\">\r\n                            ${unsafeHTML(this.markedhtml(this.article.body))}\r\n                        </div>\r\n                    </div>\r\n\r\n                    <hr />\r\n\r\n                    <div class=\"article-actions\">\r\n                        <!--   just to stop repeating myself -->\r\n                        ${articleMeta.call(this)}\r\n                    </div>\r\n\r\n                    <div class=\"row\">\r\n                        <div class=\"col-xs-12 col-md-8 offset-md-2\">\r\n                            ${this.sharedState.isAuthenticated\r\n                                ? html`\r\n                                      <form class=\"card comment-form\">\r\n                                          <div class=\"card-block\">\r\n                                              <textarea\r\n                                                  class=\"form-control\"\r\n                                                  placeholder=\"Write a comment...\"\r\n                                                  rows=\"3\"\r\n                                                  .value=${this.myComment ? this.myComment : ''}\r\n                                                  @input=${(e: any) => (this.myComment = e.target.value)}\r\n                                              ></textarea>\r\n                                          </div>\r\n                                          <div class=\"card-footer\">\r\n                                              <img\r\n                                                  src=\"${this.sharedState.currentUser.image\r\n                                                      ? this.sharedState.currentUser.image\r\n                                                      : ''}\"\r\n                                                  class=\"comment-author-img\"\r\n                                              />\r\n\r\n                                              <!-- PS! do not use button in forms, need to improve override default -->\r\n                                              <input type =\"button\" class=\"btn btn-sm btn-primary\" @click=${this.postComment}\"\r\n                                              value=\"Post Comment\">\r\n                                          </div>\r\n                                      </form>\r\n                                  `\r\n                                : ''}\r\n\r\n                            <!-- Loop all comments -->\r\n                            ${this.comments.map((comment: any) => {\r\n                                return html`\r\n                                    <comment-section\r\n                                        .comment=${comment}\r\n                                        .deleteCb=${(id: any) => {\r\n                                            this.deleteComment(id);\r\n                                        }}\r\n                                    >\r\n                                    </comment-section>\r\n                                `;\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n\r\n// same part repeated...\r\nfunction articleMeta() {\r\n    return html`\r\n        <div class=\"article-meta\">\r\n            <a href=${href('Profile', { name: this.article.author.username })}>\r\n                <img src.bind=\"${this.article.author.image ? this.article.author.image : ''}\" />\r\n            </a>\r\n            <div class=\"info\">\r\n                <a href=${href('Profile', { name: this.article.author.username })} class=\"author\"\r\n                    >${this.article.author.username}</a\r\n                >\r\n                <span class=\"date\">${format(this.article.createdAt)}</span>\r\n            </div>\r\n            ${this.canModify\r\n                ? html`\r\n                      <span>\r\n                          <a class=\"btn btn-outline-secondary btn-sm\" href=${href('EditorSlug', { slug: this.article.slug })}>\r\n                              <i class=\"ion-edit\"></i>&nbsp;Edit Article\r\n                          </a>\r\n                          &nbsp;&nbsp;\r\n                          <button class=\"btn btn-outline-danger btn-sm\" @click=${this.deleteArticle}>\r\n                              <i class=\"ion-trash-a\"></i>&nbsp;Delete Article\r\n                          </button>\r\n                      </span>\r\n                  `\r\n                : ''}\r\n            ${!this.canModify\r\n                ? html`\r\n                      <span>\r\n                          <button class=\"btn btn-sm btn-outline-secondary\" @click=${this.onToggleFollowing}>\r\n                              <i class=\"ion-plus-round\"></i>\r\n                              &nbsp; ${this.article.author.following ? 'Unfollow' : 'Follow'} ${this.article.author.username}\r\n                          </button>\r\n                          &nbsp;&nbsp;\r\n                          <button\r\n                              class=\"btn btn-sm ${this.article.favorited ? 'btn-primary' : 'btn-outline-primary'}\"\r\n                              @click=${this.onToggleFavorited}\r\n                          >\r\n                              <i class=\"ion-heart\"></i>\r\n                              &nbsp; ${this.article.favorited ? 'Unfavorite' : 'Favorite'} Post\r\n                              <span class=\"counter\">(${this.article.favoritesCount})</span>\r\n                          </button>\r\n                      </span>\r\n                  `\r\n                : ''}\r\n        </div>\r\n    `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { customElement, instance } from '@lit-html-free/core';\r\nimport { SharedState } from 'src/resources/state/sharedstate';\r\nimport { href } from '@lit-html-free/router';\r\nfunction format(date: Date) {\r\n    return new Date(date).toLocaleDateString('en', {\r\n        month: 'long',\r\n        day: '2-digit',\r\n        year: 'numeric'\r\n    });\r\n}\r\n\r\n@customElement('comment-section')\r\nexport default class extends HTMLElement {\r\n    public comment: any;\r\n    public sharedState: any;\r\n    public deleteCb: Function;\r\n\r\n    get canModify() {\r\n        return this.sharedState.currentUser && this.comment.author.username === this.sharedState.currentUser.username;\r\n    }\r\n\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.sharedState = instance(SharedState);\r\n    }\r\n\r\n    public render() {\r\n        return html`\r\n            <div class=\"card\">\r\n                <div class=\"card-block\">\r\n                    <p class=\"card-text\">${this.comment.body}</p>\r\n                </div>\r\n\r\n                <div class=\"card-footer\">\r\n                    <a href=${href('Profile', { name: this.comment.author.username })} class=\"comment-author\">\r\n                        <img src=${this.comment.author.image} class=\"comment-author-img\" />\r\n                    </a>\r\n\r\n                    &nbsp;\r\n\r\n                    <a href=${href('Profile', { name: this.comment.author.username })} class=\"comment-author\"\r\n                        >${this.comment.author.username}</a\r\n                    >\r\n                    <span class=\"date-posted\">${format(this.comment.createdAt)}</span>\r\n\r\n                    ${this.canModify\r\n                        ? html`\r\n                              <span class=\"mod-options\">\r\n                                  <i\r\n                                      class=\"ion-trash-a\"\r\n                                      @click=${() => {\r\n                                          this.deleteCb(this.comment.id);\r\n                                      }}\r\n                                  ></i>\r\n                              </span>\r\n                          `\r\n                        : ''}\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n}\r\n","import { ApiService } from './apiservice';\r\nimport { instance } from '@lit-html-free/core';\r\n\r\nexport class CommentService {\r\n    public apiService: ApiService;\r\n    constructor() {\r\n        this.apiService = instance(ApiService);\r\n    }\r\n\r\n    public async add(slug: any, payload: any) {\r\n        const data: any = await this.apiService.post(`/articles/${slug}/comments`, { comment: { body: payload } });\r\n\r\n        return data.comment;\r\n    }\r\n\r\n    public async getList(slug: any) {\r\n        const data: any = await this.apiService.get(`/articles/${slug}/comments`);\r\n\r\n        return data.comments;\r\n    }\r\n\r\n    public async destroy(commentId: any, articleSlug: any) {\r\n        const data: any = await this.apiService.delete(`/articles/${articleSlug}/comments/${commentId}`);\r\n\r\n        return data;\r\n    }\r\n}\r\n"]}