{"version":3,"sources":["/src/src/sample/index.ts","/src/src/lit-html-free-grid/index.ts","/src/src/lit-html-free-grid/interfaces.ts","/src/src/lit-html-free-grid/templates/gridTemplate.ts","/src/src/lit-html-free-grid/scrollEvent.ts","/src/src/lit-html-free-grid/templates/panelElement.ts","/src/src/lit-html-free-grid/eventIF.ts","/src/src/lit-html-free-grid/dragEvent.ts","/src/src/lit-html-free-grid/templates/headerElement.ts","/src/src/lit-html-free-grid/templates/headerColumnElements.ts","/src/src/lit-html-free-grid/templates/resizeColumnElement.ts","/src/src/lit-html-free-grid/templates/headerColumContent.ts","/src/src/lit-html-free-grid/templates/headerWithFilterElements.ts","/src/src/lit-html-free-grid/templates/sorticonElement.ts","/src/src/lit-html-free-grid/templates/filterInputElement.ts","/src/src/lit-html-free-grid/templates/headerWithoutFilterElement.ts","/src/src/lit-html-free-grid/templates/bodyElement.ts","/src/src/lit-html-free-grid/templates/rowElement.ts","/src/src/lit-html-free-grid/templates/rowElementsCustomRender.ts","/src/src/lit-html-free-grid/templates/rowElementsStandardRender.ts","/src/src/lit-html-free-grid/templates/rowTextColumnElement.ts","/src/src/lit-html-free-grid/templates/rowCheckboxColumnElement.ts","/src/src/lit-html-free-grid/templates/rowNumberColumnElement.ts","/src/src/lit-html-free-grid/templates/rowImageColumnElement.ts","/src/src/lit-html-free-grid/templates/rowDateColumnElement.ts","/src/src/lit-html-free-grid/templates/rowElementsGroupRender.ts","/src/src/lit-html-free-grid/templates/footerElement.ts","/src/src/lit-html-free-grid/selection.ts","/src/src/lit-html-free-grid/arrayUtils.ts","/src/src/lit-html-free-grid/arrayFilter.ts","/src/src/lit-html-free-grid/arraySort.ts","/src/src/lit-html-free-grid/arrayGrouping.ts","/src/src/sample/components/app-component.ts","/src/src/sample/components/colSetup.ts","/src/src/sample/components/dummyDataGenerator.ts","/src/src/sample/components/dummyData.ts"],"names":["$fsx","r","console","log","lit_html_1","interfaces_1","exports","IGridConfig","gridTemplate_1","selection_1","arrayUtils_1","FreeGrid","HTMLElement","[object Object]","super","this","_DATASET_ALL","_DATASET_FILTERED","_DATASET_VIEW","rowCache","arrayUtils","ArrayUtils","selection","Selection","config","value","_CONFIG","sortingSet","setOrderBy","groupingSet","setGrouping","groupingExpanded","setExpanded","result","orderBy","activeData","arraySort","SetConfigSort","columns","viewRows","fixed","data","oldValue","forEach","x","i","__fg_key","getKey","Array","from","o","Object","assign","slice","length","node","getElementsByTagName","scrollTop","resetRowCache","render","cs","requestAnimationFrame","reRender","html","gridTemplate","isConnected","error","cacheLength","push","customElements","get","define","defineProperty","scrollEvent_1","panelElement_1","headerElement_1","bodyElement_1","footerElement_1","freeGrid","rowPositionCache","scroll","scrollEvent","panelElement","headerElement","bodyElement","footerElement","e","scrollLeft","target","window","focus","document","activeElement","blur","rowHeight","collectionLength","cacheTotalHeight","contentHeight","clientHeight","scrolltop","lastScrollTop","isDownScroll","scrollbars","Math","abs","currentRow","floor","currentTop","newTop","needToUpdate","sort","eventIF_1","dragEvent_1","grouping","enter","columnDragDropPanel","leave","eventIF","panelHeight","map","group","getElementsByClassName","classList","remove","add","title","field","removeGroupBinded","svg","weakmap","WeakMap","directive","arg","event","call","part","handler","undefined","eventHandler","EventPart","eventName","substr","Error","caller","handlerBinded","bind","element","addEventListener","removeEventLister","set","update","dragColumn","enterColumn","dragColumnBlock","enterRect","delayDragEventTimer","_freeGrid","drop","removeEventListener","allowGrouping","groupingCallbackBinded","_e","columnDragDrop","_col","_i","mouseUp","mouseMove","clearTimeout","body","removeChild","style","top","clientY","documentElement","left","clientX","rect","cursor","center","b","button","tagName","setTimeout","createElement","textContent","header","appendChild","el","width","getBoundingClientRect","pageXOffset","pageYOffset","offset","headerColumnElements_1","headerHeight","col","reduce","total","num","headerRenderCallBackFn","headerColumnElements","resizeColumnElement_1","headerColumContent_1","curleft","hide","mousedown","mouseenter","template","disableDragDrop","headerColumContent","resizeColumnElement","originX","originalColumnWidth","preventDefault","screenX","movementX","newColumnWidth","headerWithFilterElements_1","headerWithoutFilterElement_1","mouseup","sortable","beforeSortCallbackFn","auto","sortCallbackBinded","sortCallback","filterable","headerWithFilterElements","filterOverLabel","headerWithoutFilterElement","sorticonElement_1","filterInputElement_1","atTop","_class","paragraphElement","headerRenderLabelCallBackFn","sorticonElement","inputElement","filterInputElement","ascTemplate","descTemplate","sortNo","sortAscending","isTop","currentValue","placeholder","classname","type","coltype","filterCallback","t","state","opacity","checked","indeterminate","beforeFilterCallbackFn","filterCallbackBinded","boolstyle","setState","headerRenderInputCallBackFn","filterTrigger","keyCode","which","rowElement_1","styleBody","footerHeight","styleBodyContent","rowPosition","rowElement","rowElementsCustomRender_1","rowElementsStandardRender_1","rowElementsGroupRender_1","rowData","freeGridRowStyle","rowClick","beforeSelectionChangeCallBackFn","highlightRow","afterSelectionChangeCallBackFn","rowRenderCallBackFn","rowElementsCustomRender","__group","rowElementsGroupRender","rowElementsStandardRender","rowNo","isSelected","rowTextColumnElement_1","rowCheckboxColumnElement_1","rowNumberColumnElement_1","rowImageColumnElement_1","rowDateColumnElement_1","__groupLvl","colStyle","_data","attribute","updateCallback","beforeEditCallbackFn","autoUpdateData","valueAsDate","valueAsNumber","afterEditCallbackFn","rowCheckboxColumnElement","rowImageColumnElement","rowDateColumnElement","rowNumberColumnElement","rowTextColumnElement","readonly","disabled","editEventType","_rowClick","_rowNo","defaultMarkup","__groupExpanded","groupCollapse","__groupID","groupExpand","__groupName","__groupTotal","footerRenderCallBackFn","grid","key","selectedRows","Set","row","has","getRowKey","clear","size","isSel","currentselectedRows","getSelectedRows","currentKeyKode","lastRowSelected","selectionMode","shiftKey","lastKeyKodeUsed","ctrlKey","select","deSelect","oldSel","selectRange","newSel","setSelectedRows","concat","keys","delete","start","end","array","getRowKeys","index","newRows","arrayFilter_1","arraySort_1","arrayGrouping_1","arrayFilter","ArrayFilter","ArraySort","arrayGrouping","ArrayGrouping","groupingCallback","removeGroup","collection","addToCurrentSort","groupingFields","getGrouping","full","lastSort","getOrderBy","resetSort","exist","newSort","count","indexOf","asc","no","setLastSort","runOrderbyOn","g","getExpanded","id","collapseOneOrAll","expandOneOrAll","defaultSortAttribute","reset","getLastFilter","keepExpanded","currentGrouping","splice","newdata","_event","newF","groupings","clearConfigSort","sortAsc","Date","filter","f","operator","operators","getFilterFromType","runQueryOn","EQUAL","LESS_THAN_OR_EQUAL_TO","GREATER_THAN_OR_EQUAL_TO","LESS_THAN","GREATER_THAN","CONTAINS","NOT_EQUAL_TO","DOES_NOT_CONTAIN","BEGIN_WITH","END_WITH","lastFilter","objArray","ObjFilter","rowValue","filterValue","newFilterOperator","filterOperator","typeBool","true","false","Number","toLowerCase","charAt","err","substring","curSort","localeCompareCode","localeCompareOptions","sensitivity","code","options","configColumns","param","isArray","useSetValue","thisSort","obj1","obj2","currentObj","v1","v2","getLocaleCompareResult","x1","x2","resultLocale","localeCompare","expanded","groups","arrayToGroup","groupBy","groupNo","mainGroup","createMainGrouping","childGroupArray","newSubGroup","groupChildren","subGroup","all","mainGroups","__groupChildren","sg","tempGroupArray","curGroup","tempValue","gidm","toString","rebuiltChildrenArray","child","gidc","colSetup_1","dummyDataGenerator_1","AppComponent","dummyDataGenerator","DummyDataGenerator","generateData","gridConfig","COL_SETUP","manualConfigChange","internalDataArray","totalGenerated","rowTop","first","last","images","color","image","dummyArray","random1","random","random2","random3","random4","date","setDate","getDate","name","number","bool"],"mappings":"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","file":"app","sourcesContent":["import 'lit-html-free-grid';\r\nimport 'lit-html-free-grid/grid.css';\r\nimport './index.css';\r\n\r\n// import our app\r\nimport './components/app-component';\r\n\r\n\r\nconsole.log('sample-v:', 1);\r\n","import { render, html } from 'lit-html';\r\nimport { IGridConfig, IDataRow } from './interfaces';\r\nexport { IGridConfig } from './interfaces';\r\nimport { gridTemplate } from './templates/gridTemplate';\r\nimport { Selection } from './selection';\r\nimport { ArrayUtils } from './arrayUtils';\r\n\r\nexport class FreeGrid extends HTMLElement {\r\n    // private\r\n    private _DATASET_ALL: IDataRow[] = [];\r\n    private _DATASET_FILTERED: IDataRow[] = [];\r\n    private _DATASET_VIEW: IDataRow[] = [];\r\n    private _CONFIG: IGridConfig;\r\n    // private variableRowHeight: { height: number }[] = []; for later\r\n\r\n    // public\r\n    public arrayUtils: ArrayUtils;\r\n    public rowCache: { i: number }[] = [];\r\n    public selection: Selection;\r\n\r\n    set config(value: IGridConfig) {\r\n        this._CONFIG = value;\r\n        if (this.config) {\r\n            if (this.config.sortingSet) {\r\n                this.arrayUtils.setOrderBy(this.config.sortingSet);\r\n            }\r\n            if (this.config.groupingSet) {\r\n                this.arrayUtils.setGrouping(this.config.groupingSet);\r\n            }\r\n            if (this.config.groupingExpanded) {\r\n                this.arrayUtils.setExpanded(this.config.groupingExpanded);\r\n            }\r\n\r\n            const result = this.arrayUtils.orderBy(this.activeData, null, false);\r\n            this.arrayUtils.arraySort.SetConfigSort(this.config.columns);\r\n            this.viewRows = result.fixed;\r\n        }\r\n    }\r\n\r\n    get config() {\r\n        return this._CONFIG;\r\n    }\r\n\r\n    set data(value: IDataRow[]) {\r\n        const oldValue = this.data;\r\n\r\n        // set key to data - need to have option for user key\r\n        value.forEach((x, i) => {\r\n            if (x && !(<any>x).__fg_key) {\r\n                (<any>x).__fg_key = this.selection.getKey();\r\n            } else {\r\n                if (!value[i]) {\r\n                    value[i] = { __fg_key: this.selection.getKey() };\r\n                }\r\n            }\r\n        });\r\n\r\n        this._DATASET_ALL = Array.from(value, o => Object.assign({}, o)); // <- do I want to update user array Im allready setting a key on it ?\r\n        this._DATASET_FILTERED = this._DATASET_ALL.slice();\r\n        this._DATASET_VIEW = this._DATASET_ALL.slice();\r\n        if (oldValue.length !== this._DATASET_ALL.length) {\r\n            const node = this.getElementsByTagName('free-grid-body')[0];\r\n            if (node) {\r\n                node.scrollTop = 0;\r\n            }\r\n            this.resetRowCache();\r\n        }\r\n        if (this.config) {\r\n            if (this.config.sortingSet) {\r\n                this.arrayUtils.setOrderBy(this.config.sortingSet);\r\n            }\r\n            if (this.config.groupingSet) {\r\n                this.arrayUtils.setGrouping(this.config.groupingSet);\r\n            }\r\n\r\n            const result = this.arrayUtils.orderBy(this.activeData, null, false);\r\n            this.arrayUtils.arraySort.SetConfigSort(this.config.columns);\r\n            this.viewRows = result.fixed;\r\n        }\r\n        this.render();\r\n    }\r\n\r\n    get data(): IDataRow[] {\r\n        return this._DATASET_ALL;\r\n    }\r\n\r\n    /**\r\n     * Filtered data/ active set beeing used when grouping and sorting\r\n     */\r\n    set activeData(value) {\r\n        this._DATASET_FILTERED = value;\r\n    }\r\n    get activeData() {\r\n        return this._DATASET_FILTERED;\r\n    }\r\n\r\n    /**\r\n     * data thats displayed, this will have have rows that isnt data when grouped\r\n     */\r\n    set viewRows(value) {\r\n        this._DATASET_VIEW = value;\r\n    }\r\n    get viewRows() {\r\n        return this._DATASET_VIEW;\r\n    }\r\n\r\n    constructor() {\r\n        super();\r\n        this.arrayUtils = new ArrayUtils(this);\r\n        this.selection = new Selection(this);\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.render();\r\n    }\r\n\r\n    // internal helper called when grouping/events etc\r\n    public reRender(cs?: IGridConfig) {\r\n        requestAnimationFrame(() => {\r\n            this.config = cs || this.config;\r\n            this.render();\r\n        });\r\n    }\r\n\r\n    // helper for external if they chnage config and want to force update\r\n    public manualConfigChange() {\r\n        if (this.config) {\r\n            if (this.config.sortingSet) {\r\n                this.arrayUtils.setOrderBy(this.config.sortingSet);\r\n            }\r\n            if (this.config.groupingSet) {\r\n                this.arrayUtils.setGrouping(this.config.groupingSet);\r\n            }\r\n            if (this.config.groupingExpanded) {\r\n                this.arrayUtils.setExpanded(this.config.groupingExpanded);\r\n            }\r\n\r\n            const result = this.arrayUtils.orderBy(this.activeData, null, false);\r\n            this.arrayUtils.arraySort.SetConfigSort(this.config.columns);\r\n            this.viewRows = result.fixed;\r\n        }\r\n        this.reRender();\r\n    }\r\n\r\n    // main render function called by lit.html\r\n    public render() {\r\n        // render always need to request animation frame, else click events will get skipped\r\n\r\n        if (this.config) {\r\n            render(\r\n                html`\r\n                    ${gridTemplate(this, this.rowCache)}\r\n                `,\r\n                this\r\n            );\r\n        } else {\r\n            if (this.isConnected) {\r\n                console.error('no config set');\r\n\r\n                render(html``, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    // resets row cache\r\n    private resetRowCache() {\r\n        const cacheLength = this._DATASET_VIEW.length > 40 ? 40 : this._DATASET_VIEW.length;\r\n        this.rowCache = [];\r\n        for (let i = 0; i < cacheLength; i++) {\r\n            this.rowCache.push({ i: i });\r\n        }\r\n    }\r\n}\r\n\r\nif (!customElements.get('free-grid')) {\r\n    customElements.define('free-grid', FreeGrid);\r\n}\r\n","import { FreeGrid } from '.';\r\n\r\nexport type CallbackEvent = { target: HTMLInputElement };\r\nexport type ColumnCallBackFn = (e: CallbackEvent, col: IColumns, freeGrid: FreeGrid) => void;\r\nexport type CellCallbackFn = (e: CallbackEvent, col: IColumns, row: number, data: IDataRow, freeGrid: FreeGrid) => void;\r\nexport type RowCallBackFn = (e: CallbackEvent, row: number, freeGrid: FreeGrid) => void;\r\nexport type renderCallBackFn = (html: any, col: IColumns, row: number, data: IDataRow, freeGrid: FreeGrid) => void;\r\n\r\nexport type FilterOperator =\r\n    | 'EQUAL'\r\n    | 'LESS_THAN_OR_EQUAL_TO'\r\n    | 'GREATER_THAN_OR_EQUAL_TO'\r\n    | 'LESS_THAN'\r\n    | 'GREATER_THAN'\r\n    | 'CONTAINS'\r\n    | 'NOT_EQUAL_TO'\r\n    | 'DOES_NOT_CONTAIN'\r\n    | 'BEGIN_WITH'\r\n    | 'END_WITH';\r\nexport type DataTypes = 'text' | 'number' | 'image' | 'boolean' | 'date';\r\nexport type Triggers = 'input' | 'change';\r\nexport type SelectionMode = 'none' | 'single' | 'multiple';\r\nexport type rowCache = { i: number };\r\n\r\nexport interface IColumns {\r\n    header?: string;\r\n    attribute: string;\r\n    /**Default FALSE */\r\n    readonly?: boolean;\r\n    /**Default FALSE */\r\n    disabled?: boolean;\r\n    /**Default FALSE */\r\n    hide?: boolean;\r\n    /**Default 100 */\r\n    width?: number;\r\n    filterable?: {\r\n        /**Default FALSE */\r\n        filterOverLabel?: boolean;\r\n        beforeFilterCallbackFn?: ColumnCallBackFn;\r\n        /**Default TRUE */\r\n        auto?: boolean;\r\n        /**Default CHANGE */\r\n        filterTrigger?: Triggers;\r\n        /**Default STRING/TEXT */\r\n        currentValue?: string | number | boolean | Date;\r\n        placeholder?: string;\r\n        /**Default BEGIN WITH */\r\n        operator?: FilterOperator;\r\n    };\r\n    sortable?: {\r\n        /**Internal used for making sort icon on header*/\r\n        sortAscending?: boolean;\r\n        /**Internal used for making sort icon on header*/\r\n        sortNo?: number;\r\n        beforeSortCallbackFn?: ColumnCallBackFn;\r\n        /**Default TRUE */\r\n        auto?: boolean;\r\n    };\r\n    type?: DataTypes;\r\n    beforeEditCallbackFn?: CellCallbackFn;\r\n    /**Default TRUE */\r\n    autoUpdateData?: boolean;\r\n    afterEditCallbackFn?: CellCallbackFn;\r\n    editEventType?: Triggers;\r\n    rowRenderCallBackFn?: renderCallBackFn;\r\n    headerRenderCallBackFn?: renderCallBackFn;\r\n    headerRenderLabelCallBackFn?: renderCallBackFn;\r\n    headerRenderInputCallBackFn?: renderCallBackFn;\r\n    disableDragDrop?: boolean;\r\n    allowGrouping?: boolean;\r\n}\r\n\r\nexport interface IGridConfig {\r\n    columns: IColumns[];\r\n    rowHeight: number;\r\n    panelHeight?: number;\r\n    headerHeight: number;\r\n    footerHeight: number;\r\n    scrollLeft?: number;\r\n    lastScrollTop?: number;\r\n    selectionMode?: SelectionMode;\r\n    beforeSelectionChangeCallBackFn?: RowCallBackFn;\r\n    afterSelectionChangeCallBackFn?: RowCallBackFn;\r\n    rowRenderCallBackFn?: renderCallBackFn;\r\n    footerRenderCallBackFn?: renderCallBackFn;\r\n    headerRenderCallBackFn?: renderCallBackFn;\r\n    /**\r\n     * you need to set new or config for this to work\r\n     * You can use this to save current sorting/grouping for later\r\n     */\r\n    groupingSet?: IGroupingObj[];\r\n    sortingSet?: ISortObjectInterface[];\r\n    groupingExpanded?: string[];\r\n}\r\n\r\nexport interface ISortObjectInterface {\r\n    attribute: string;\r\n    asc?: boolean;\r\n    no?: number;\r\n}\r\n\r\nexport type IDataRow = {\r\n    __fg_key?: string | number;\r\n    __group?: boolean;\r\n    __groupID?: string;\r\n    __groupName?: string;\r\n    __groupLvl?: number;\r\n    __groupTotal?: number;\r\n    __groupChildren?: IDataRow[];\r\n    __groupExpanded?: boolean;\r\n} & object;\r\n\r\nexport interface IGroupingObj {\r\n    title: string;\r\n    field: string;\r\n}\r\n\r\nexport interface IFilterObj {\r\n    operator: number;\r\n    value: any;\r\n    attribute: string;\r\n    type: string;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { FreeGrid } from '..';\r\nimport { scrollEvent } from '../scrollEvent';\r\nimport { panelElement } from './panelElement';\r\nimport { headerElement } from './headerElement';\r\nimport { bodyElement } from './bodyElement';\r\nimport { footerElement } from './footerElement';\r\nimport { rowCache } from '../interfaces';\r\n\r\nexport const gridTemplate = (freeGrid: FreeGrid, rowPositionCache: rowCache[]) => {\r\n    const scroll = scrollEvent(freeGrid, rowPositionCache);\r\n\r\n    return html`\r\n        ${panelElement(freeGrid)} ${headerElement(freeGrid)} ${bodyElement(scroll, freeGrid, rowPositionCache)}\r\n        ${footerElement(freeGrid)}\r\n    `;\r\n};\r\n","import { CallbackEvent } from './interfaces';\r\nimport { FreeGrid } from '.';\r\nexport function scrollEvent(\r\n    freeGrid: FreeGrid,\r\n    rowPositionCache: {\r\n        i: number;\r\n    }[]\r\n) {\r\n    return (e: CallbackEvent) => {\r\n        if (freeGrid.config.scrollLeft !== e.target.scrollLeft) {\r\n            freeGrid.config.scrollLeft = e.target.scrollLeft;\r\n            freeGrid.reRender();\r\n        } else {\r\n            window.focus();\r\n            if (document.activeElement) {\r\n                (document.activeElement as any).blur();\r\n            }\r\n            const rowHeight = freeGrid.config.rowHeight || 25;\r\n            const cacheLength = rowPositionCache.length;\r\n            const collectionLength = freeGrid.viewRows.length;\r\n            const cacheTotalHeight = rowHeight * cacheLength;\r\n            const contentHeight = e.target.clientHeight;\r\n            const scrolltop = e.target.scrollTop;\r\n            const lastScrollTop = freeGrid.config.lastScrollTop;\r\n            let isDownScroll = true;\r\n            if (scrolltop < lastScrollTop) {\r\n                isDownScroll = false;\r\n            }\r\n            let scrollbars = false;\r\n            if (Math.abs(scrolltop - lastScrollTop) > 100) {\r\n                scrollbars = true;\r\n            }\r\n            freeGrid.config.lastScrollTop = scrolltop;\r\n            let currentRow = Math.floor(scrolltop / rowHeight);\r\n            if (scrollbars) {\r\n                for (let i = 0; i < cacheLength; i++) {\r\n                    rowPositionCache[i].i = currentRow;\r\n                    currentRow++;\r\n                }\r\n            } else {\r\n                for (let i = 0; i < cacheLength; i++) {\r\n                    const cache = rowPositionCache[i];\r\n                    const currentTop = cache.i * rowHeight;\r\n                    let needToUpdate = false;\r\n                    let newTop: number;\r\n                    if (!isDownScroll) {\r\n                        if (currentTop > scrolltop + contentHeight) {\r\n                            needToUpdate = true;\r\n                            newTop = currentTop - cacheTotalHeight;\r\n                            currentRow = (currentTop - cacheTotalHeight) / rowHeight;\r\n                        }\r\n                    } else {\r\n                        if (currentTop < scrolltop - rowHeight) {\r\n                            needToUpdate = true;\r\n                            newTop = currentTop + cacheTotalHeight;\r\n                            currentRow = (currentTop + cacheTotalHeight) / rowHeight;\r\n                        }\r\n                    }\r\n                    if (needToUpdate === true && currentRow >= 0 && currentRow <= collectionLength) {\r\n                        rowPositionCache[i].i = newTop / rowHeight;\r\n                    }\r\n                }\r\n                rowPositionCache.sort();\r\n            }\r\n            // need to call render directly so it updates right away\r\n            freeGrid.render();\r\n        }\r\n    };\r\n}\r\n","import { html, svg } from 'lit-html';\r\nimport { FreeGrid } from '..';\r\nimport { eventIF } from '../eventIF';\r\nimport { columnDragDropPanel } from '../dragEvent';\r\n\r\nexport function panelElement(freeGrid: FreeGrid) {\r\n    const grouping = freeGrid.config.groupingSet || [];\r\n\r\n    const mouseEnter = (e: MouseEvent) => {\r\n        (<HTMLElement>e.target).getElementsByClassName('free-grid-icon')[0].classList.remove('free-grid-iconhidden');\r\n    };\r\n\r\n    const mouseLeave = (e: MouseEvent) => {\r\n        (<HTMLElement>e.target).getElementsByClassName('free-grid-icon')[0].classList.add('free-grid-iconhidden');\r\n    };\r\n\r\n    const enter = columnDragDropPanel('enter', freeGrid);\r\n    const leave = columnDragDropPanel('leave', freeGrid);\r\n\r\n    return html`\r\n        <free-grid-panel\r\n            @custom-1=${eventIF(true, 'mouseleave', leave)}\r\n            @custom-2=${eventIF(true, 'mouseenter', enter)}\r\n            style=\"height:${freeGrid.config.panelHeight}px\"\r\n            class=\"free-grid-panel\"\r\n        >\r\n            ${grouping.map(group => {\r\n                const click = () => {\r\n                    freeGrid.arrayUtils.removeGroupBinded(group);\r\n                };\r\n\r\n                return html`\r\n                    <div @mouseenter=${mouseEnter} @mouseleave=${mouseLeave} class=\"free-grid-grouping-panel-container\">\r\n                        <p class=\"free-grid-grouping-panel-p\">\r\n                            ${group.title || group.field}\r\n                            <i>\r\n                                <svg\r\n                                    @click=${click}\r\n                                    class=\"free-grid-icon free-grid-iconhidden\"\r\n                                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    viewBox=\"0 0 16 16\"\r\n                                >\r\n                                    ${svg`<path d=\"M3 4l4.3 4L3 12h1.4L8 8.7l3.5 3.3H13L8.6 8 13 4h-1.5L8 7.3 4.4 4H3z\"/>`}\r\n                                </svg></i\r\n                            >\r\n                        </p>\r\n                    </div>\r\n                `;\r\n            })}\r\n        </free-grid-panel>\r\n    `;\r\n}\r\n","import { directive, EventPart } from 'lit-html';\r\nconst weakmap = new WeakMap();\r\n\r\n// soemthing\r\nexport const eventIF = directive((arg: any | null | undefined, event: string, call: Function) => (part: any) => {\r\n    const EventHandler = class {\r\n        private part: any;\r\n        private event: string;\r\n        private caller: Function;\r\n        private handlerBinded: EventListenerOrEventListenerObject;\r\n        private arg: boolean;\r\n\r\n        constructor(part: any, arg: any, event: any, call: any) {\r\n            if (!(part instanceof EventPart) || part.eventName.substr(0, 6) !== 'custom') {\r\n                throw new Error('myListDirective can only be used on \"@custom\" eventName');\r\n            } else {\r\n                this.part = part;\r\n                this.arg = arg;\r\n                this.event = event;\r\n                this.caller = call;\r\n                this.handlerBinded = this.handler.bind(this);\r\n                if (arg) {\r\n                    part.element.addEventListener(event, this.handlerBinded);\r\n                }\r\n            }\r\n        }\r\n\r\n        public handler(e: any) {\r\n            this.caller(e);\r\n        }\r\n\r\n        public update(arg: any, event: any, call: any) {\r\n            this.part = part;\r\n            this.caller = call;\r\n            if (this.arg && arg) {\r\n                if (this.event !== event) {\r\n                    this.part.element.removeEventLister(this.event, this.handlerBinded);\r\n                    this.event = event;\r\n                    this.part.element.addEventListener(event, this.handlerBinded);\r\n                }\r\n            } else {\r\n                if (this.arg && !arg) {\r\n                    this.part.element.removeEventLister(this.event, this.handlerBinded);\r\n                    this.event = event;\r\n                }\r\n                if (!this.arg && arg) {\r\n                    this.event = event;\r\n                    this.part.element.addEventListener(event, this.handlerBinded);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const handler = weakmap.get(part);\r\n    if (handler === undefined) {\r\n        const eventHandler = new EventHandler(part, arg, event, call);\r\n        weakmap.set(part, eventHandler);\r\n    } else {\r\n        handler.update(arg, event, call);\r\n    }\r\n});\r\n","import { FreeGrid } from '.';\r\nimport { IColumns } from './interfaces';\r\n\r\nlet dragColumn: null | number = null;\r\nlet enterColumn: null | number = null;\r\nlet dragColumnBlock: HTMLElement = null;\r\nlet enterRect: any = null;\r\nlet delayDragEventTimer: any = null;\r\n\r\nfunction offset(el: HTMLElement, width: number) {\r\n    const rect = el.getBoundingClientRect();\r\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft,\r\n        scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n\r\n    return { top: rect.top + scrollTop, left: rect.left + scrollLeft, center: rect.left + width / 2 + scrollLeft };\r\n}\r\n\r\nexport const columnDragDropPanel = (event: string, _freeGrid: FreeGrid) => {\r\n    const drop = (e: any) => {\r\n        e.target.removeEventListener('mouseup', drop);\r\n        if (_freeGrid.config.columns[dragColumn].allowGrouping) {\r\n            _freeGrid.arrayUtils.groupingCallbackBinded(e, _freeGrid.config.columns[dragColumn], _freeGrid);\r\n        }\r\n        (e.target as any).classList.remove('free-grid-candrop');\r\n    };\r\n\r\n    return (_e: MouseEvent) => {\r\n        if (event === 'enter' && dragColumn) {\r\n            _e.target.addEventListener('mouseup', drop);\r\n            if (_freeGrid.config.columns[dragColumn].allowGrouping) {\r\n                (_e.target as any).classList.add('free-grid-candrop');\r\n            }\r\n        }\r\n\r\n        if (event === 'leave' && dragColumn) {\r\n            _e.target.removeEventListener('mouseup', drop);\r\n            (_e.target as any).classList.remove('free-grid-candrop');\r\n        }\r\n    };\r\n};\r\n\r\nexport const columnDragDrop = (event: string, _col: IColumns, _i: number, _freeGrid: FreeGrid) => {\r\n    // here we will clean up eevnt listeners\r\n    const mouseUp = function() {\r\n        document.removeEventListener('mouseup', mouseUp);\r\n        document.removeEventListener('mousemove', mouseMove);\r\n        clearTimeout(delayDragEventTimer);\r\n        dragColumn = null;\r\n        enterColumn = null;\r\n        enterRect = null;\r\n        if (dragColumnBlock) {\r\n            document.body.removeChild(dragColumnBlock);\r\n        }\r\n        dragColumnBlock = null;\r\n    };\r\n\r\n    // this will just move our label\r\n    const mouseMove = function(e: MouseEvent) {\r\n        dragColumnBlock.style.top = e.clientY + document.documentElement.scrollTop + 'px'; // hide it\r\n        dragColumnBlock.style.left = e.clientX + document.documentElement.scrollLeft + 'px';\r\n\r\n        if (enterColumn !== null && dragColumn !== enterColumn) {\r\n            const rect = enterRect;\r\n            const cursor = e.clientX + document.documentElement.scrollLeft;\r\n\r\n            if (cursor + 15 > rect.center && cursor - 15 < rect.center) {\r\n                const columns = _freeGrid.config.columns;\r\n                const b = columns[dragColumn];\r\n                columns[dragColumn] = columns[enterColumn];\r\n                columns[enterColumn] = b;\r\n                dragColumn = enterColumn;\r\n                enterColumn = null;\r\n\r\n                _freeGrid.reRender();\r\n            }\r\n        }\r\n    };\r\n\r\n    // main event binded to column\r\n    return (_e: MouseEvent) => {\r\n        // mouse down event\r\n        if (event === 'dragstart' && _e.button === 0 && (<any>_e.target).tagName === 'P') {\r\n            // regsiter mouseup so we can clean up\r\n\r\n            document.addEventListener('mouseup', mouseUp);\r\n            dragColumn = _i;\r\n            delayDragEventTimer = setTimeout(() => {\r\n\r\n                // I could do this with lit-html too... but can I have classes on shadow dom and use them here ?\r\n                // I might get a styling issue if I use class\r\n                dragColumnBlock = document.createElement('div');\r\n                dragColumnBlock.style.top = -1200 + 'px'; // hide it\r\n                dragColumnBlock.style.left = -1200 + 'px';\r\n                dragColumnBlock.classList.add('free-grid');\r\n                dragColumnBlock.classList.add('free-grid-drag');\r\n                dragColumnBlock.textContent = _col.header;\r\n                document.body.appendChild(dragColumnBlock);\r\n                // add event so we can move new element\r\n                document.addEventListener('mousemove', mouseMove);\r\n            }, 500);\r\n        }\r\n\r\n        // when something gets dragged over\r\n        if (event === 'enter' && dragColumn !== null) {\r\n            // same or new column ?\r\n            if (dragColumn !== _i) {\r\n                enterColumn = _i;\r\n                // get position\r\n                enterRect = offset(_e.target as HTMLElement, _col.width || 100);\r\n            }\r\n        }\r\n    };\r\n};\r\n","import { html } from 'lit-html';\r\nimport { FreeGrid } from '..';\r\nimport { headerColumnElements } from './headerColumnElements';\r\n\r\nexport function headerElement(freeGrid: FreeGrid) {\r\n    const style = `left:${freeGrid.config.scrollLeft !== undefined ? -freeGrid.config.scrollLeft : 0}px;\r\n                   top:${freeGrid.config.panelHeight}px;\r\n                   height:${freeGrid.config.headerHeight}px;\r\n                   width:${freeGrid.config.columns.map(col => col.width || 100).reduce((total, num) => total + num) + 25}px`;\r\n    const config = freeGrid.config;\r\n\r\n    return config.headerRenderCallBackFn\r\n        ? html`\r\n              <free-grid-header style=${style} class=\"free-grid-header\">\r\n                  ${config.headerRenderCallBackFn(html, null, null, null, freeGrid)}\r\n              </free-grid-header>\r\n          `\r\n        : html`\r\n              <free-grid-header style=${style} class=\"free-grid-header\">\r\n                  ${headerColumnElements(freeGrid)}\r\n              </free-grid-header>\r\n          `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { FreeGrid } from '..';\r\nimport { resizeColumnElement } from './resizeColumnElement';\r\nimport { headerColumContent } from './headerColumContent';\r\nimport { columnDragDrop } from '../dragEvent';\r\nimport { eventIF } from '../eventIF';\r\n\r\nexport function headerColumnElements(freeGrid: FreeGrid) {\r\n    /** current left of column, so they stack nicely */\r\n    const grouping = freeGrid.config.groupingSet && freeGrid.config.groupingSet.length;\r\n    let curleft = grouping ? grouping * 15 : 0;\r\n\r\n    return freeGrid.config.columns.map((col, i) => {\r\n        if (!col.hide) {\r\n            const style = `width:${col.width || 100}px;left:${curleft}px`;\r\n            const mousedown = columnDragDrop('dragstart', col, i, freeGrid);\r\n            const mouseenter = columnDragDrop('enter', col, i, freeGrid);\r\n\r\n            const template = html`\r\n                ${html`\r\n                    <free-grid-col\r\n                        class=\"free-grid-col free-grid-grouping-row\"\r\n                        style=\"width:${grouping ? grouping * 15 : 0}px;left:0\"\r\n                    >\r\n                    </free-grid-col>\r\n                `}\r\n                <free-grid-header-col\r\n                    style=${style}\r\n                    class=\"free-grid-col ${!col.disableDragDrop ? 'free-grid-dragHandle' : ''}\"\r\n                    config-column=${i}\r\n                    @custom-1=${eventIF(!col.disableDragDrop, 'mousedown', mousedown)}\r\n                    @custom-2=${eventIF(!col.disableDragDrop, 'mouseenter', mouseenter)}\r\n                >\r\n                    ${headerColumContent(freeGrid, col)} ${resizeColumnElement(freeGrid, col)}\r\n                </free-grid-header-col>\r\n            `;\r\n\r\n            curleft = curleft + (col.width || 100);\r\n\r\n            return template;\r\n        } else {\r\n            return html``;\r\n        }\r\n    });\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\n\r\nexport function resizeColumnElement(freeGrid: FreeGrid, col: IColumns) {\r\n    let originX: number = null;\r\n    const originalColumnWidth = col.width;\r\n\r\n    const mouseMove = (e: MouseEvent) => {\r\n        e.preventDefault();\r\n        if (originX) {\r\n            const movment = Math.abs(originX - e.screenX);\r\n            if (movment % 2 === 0) {\r\n                const movementX = originX - e.screenX;\r\n                const newColumnWidth = originalColumnWidth - movementX;\r\n                col.width = newColumnWidth > 10 ? newColumnWidth : 10;\r\n                requestAnimationFrame(() => {\r\n                    freeGrid.reRender();\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const mouseUp = () => {\r\n        document.removeEventListener('mousemove', mouseMove);\r\n        document.removeEventListener('mouseup', mouseUp);\r\n    };\r\n\r\n    const mouseDown = (e: MouseEvent) => {\r\n        originX = e.screenX;\r\n        document.addEventListener('mousemove', mouseMove);\r\n        document.addEventListener('mouseup', mouseUp);\r\n    };\r\n\r\n    return html`\r\n        <div class=\"free-grid-draggable-handler\" @mousedown=${mouseDown}></div>\r\n    `;\r\n}\r\n","import { IColumns, CallbackEvent } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\nimport { headerWithFilterElements } from './headerWithFilterElements';\r\nimport { headerWithoutFilterElement } from './headerWithoutFilterElement';\r\nimport { html } from 'lit-html';\r\n\r\nexport function headerColumContent(freeGrid: FreeGrid, col: IColumns) {\r\n    // not using click for sort since I can override it so easly if I add drag/drop of columns\r\n\r\n    const mouseup = (e: MouseEvent) => {\r\n        col.sortable.beforeSortCallbackFn && col.sortable.beforeSortCallbackFn(<any>e, col, freeGrid);\r\n        if (col.sortable.auto !== false) {\r\n            freeGrid.arrayUtils.sortCallbackBinded(<any>e, col, freeGrid);\r\n        }\r\n    };\r\n\r\n    const sortCallback = (e: CallbackEvent) => {\r\n        if ((<any>e).button === 0) {\r\n            e.target.addEventListener('mouseup', mouseup);\r\n            setTimeout(() => {\r\n                e.target.removeEventListener('mouseup', mouseup);\r\n            }, 500);\r\n        } else {\r\n            // temp sorter\r\n            if (col.allowGrouping) {\r\n                freeGrid.arrayUtils.groupingCallbackBinded(e, col, freeGrid);\r\n            }\r\n        }\r\n    };\r\n    if (col.headerRenderCallBackFn) {\r\n        return col.headerRenderCallBackFn(html, col, null, null, freeGrid);\r\n    } else {\r\n        if (col.filterable) {\r\n            return headerWithFilterElements(col, freeGrid, sortCallback, col.filterable.filterOverLabel);\r\n        } else {\r\n            return headerWithoutFilterElement(col, freeGrid, sortCallback);\r\n        }\r\n    }\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns, ColumnCallBackFn } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\nimport { sorticonElement } from './sorticonElement';\r\nimport { eventIF } from '../eventIF';\r\nimport { filterInputElement } from './filterInputElement';\r\n\r\nexport function headerWithFilterElements(col: IColumns, freeGrid: FreeGrid, sortCallback: ColumnCallBackFn, atTop: boolean) {\r\n    const _class = `free-grid-label-${atTop ? 'top' : 'bottom'}`;\r\n\r\n    const paragraphElement = col.headerRenderLabelCallBackFn\r\n        ? col.headerRenderLabelCallBackFn(html, col, null, null, freeGrid)\r\n        : html`\r\n              <p class=${_class} @custom=${eventIF(col.sortable, 'mousedown', sortCallback)} oncontextmenu=\"return false;\">\r\n                  ${col.header || ''} ${sorticonElement(freeGrid, col)}\r\n              </p>\r\n          `;\r\n\r\n    const inputElement = html`\r\n        ${filterInputElement(col, freeGrid, col.filterable.filterOverLabel)}\r\n    `;\r\n\r\n    if (atTop) {\r\n        return html`\r\n            ${inputElement}${paragraphElement}\r\n        `;\r\n    } else {\r\n        return html`\r\n            ${paragraphElement}${inputElement}\r\n        `;\r\n    }\r\n}\r\n","import { html, svg } from 'lit-html';\r\nimport { IColumns } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\n\r\nexport function sorticonElement(_freeGrid: FreeGrid, col: IColumns) {\r\n    const ascTemplate = svg`\r\n        <svg class=\"free-grid-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M7.4 6L3 10h1.5L8 7l3.4 3H13L8.5 6h-1z\"/>\r\n        </svg>`;\r\n\r\n    const descTemplate = svg`\r\n        <svg class=\"free-grid-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\r\n            <path d=\"M7.4 10L3 6h1.5L8 9.2 11.3 6H13l-4.5 4h-1z\"/>\r\n        </svg>`;\r\n\r\n    if (col.sortable && col.sortable.sortNo) {\r\n        return html`\r\n            <i class=\"free-grid-fa-sort-number\" data-vgridsort=\"${col.sortable.sortNo}\">\r\n                ${col.sortable.sortAscending ? ascTemplate : descTemplate}\r\n            </i>\r\n        `;\r\n    } else {\r\n        return html``;\r\n    }\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns, CallbackEvent } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\nimport { eventIF } from '../eventIF';\r\n\r\nexport function filterInputElement(col: IColumns, freeGrid: FreeGrid, isTop: boolean) {\r\n    const value = col.filterable.currentValue || null;\r\n    const placeholder = col.filterable.placeholder || '';\r\n\r\n    let classname;\r\n    if (col.type === 'boolean') {\r\n        classname = 'free-grid-row-checkbox-50';\r\n    } else {\r\n        if (isTop) {\r\n            classname = 'free-grid-header-input-top';\r\n        } else {\r\n            classname = 'free-grid-header-input-bottom';\r\n        }\r\n    }\r\n\r\n    const coltype = col.type === 'boolean' ? 'checkbox' : col.type;\r\n\r\n    const filterCallback = (e: CallbackEvent) => {\r\n        // if boolean column we to to overide how it behaves\r\n        if (col.type === 'boolean') {\r\n            const t: any = e.target;\r\n            switch (t.state) {\r\n                case 0:\r\n                    t.state = 2;\r\n                    t.style.opacity = '1';\r\n                    t.checked = true;\r\n                    t.indeterminate = false;\r\n                    break;\r\n                case 2:\r\n                    t.state = 3;\r\n                    t.style.opacity = '1';\r\n                    t.indeterminate = false;\r\n                    break;\r\n                default:\r\n                    t.checked = false;\r\n                    t.state = 0;\r\n                    t.style.opacity = '0.3';\r\n                    t.indeterminate = true;\r\n            }\r\n        }\r\n        col.filterable.beforeFilterCallbackFn && col.filterable.beforeFilterCallbackFn(e, col, freeGrid);\r\n        if (col.filterable.auto !== false) {\r\n            freeGrid.arrayUtils.filterCallbackBinded(e, col, freeGrid);\r\n        }\r\n    };\r\n\r\n    const enterKeyDown = (e: KeyboardEvent) => {\r\n        const keycode = e.keyCode ? e.keyCode : e.which;\r\n        if (keycode === 13) {\r\n            filterCallback(<any>e);\r\n        }\r\n    };\r\n\r\n    let boolstyle = null;\r\n    let indeterminate = false;\r\n    let setState = 0;\r\n    if (col.type === 'boolean' && col.filterable) {\r\n        // if no value is set then its \"blank state, nothing filtered\r\n        if (col.filterable.currentValue !== false && col.filterable.currentValue !== true) {\r\n            boolstyle = 'opacity:0.3';\r\n            indeterminate = true;\r\n            setState = 0;\r\n        } else {\r\n            setState = col.filterable.currentValue ? 2 : 3;\r\n        }\r\n    }\r\n\r\n    return col.headerRenderInputCallBackFn\r\n        ? col.headerRenderInputCallBackFn(html, col, null, null, freeGrid)\r\n        : html`\r\n              <input\r\n                  type=${coltype}\r\n                  style=${boolstyle}\r\n                  .indeterminate=${indeterminate}\r\n                  .state=${setState}\r\n                  class=${classname}\r\n                  @custom=${eventIF(true, col.filterable.filterTrigger || 'change', filterCallback)}\r\n                  @custom-keydown=${eventIF(true, 'keydown', enterKeyDown)}\r\n                  .value=${value}\r\n                  placeholder=${placeholder}\r\n              />\r\n          `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns, ColumnCallBackFn } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\nimport { eventIF } from '../eventIF';\r\nimport { sorticonElement } from './sorticonElement';\r\n\r\nexport function headerWithoutFilterElement(col: IColumns, freeGrid: FreeGrid, sortCallback: ColumnCallBackFn) {\r\n    return col.headerRenderLabelCallBackFn\r\n        ? col.headerRenderLabelCallBackFn(html, col, null, null, freeGrid)\r\n        : html`\r\n              <p\r\n                  class=\"free-grid-label-full\"\r\n                  @custom=${eventIF(col.sortable, 'mousedown', sortCallback)}\r\n                  oncontextmenu=\"return false;\"\r\n              >\r\n                  ${col.header || ''} ${sorticonElement(freeGrid, col)}\r\n              </p>\r\n          `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { CallbackEvent, rowCache } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\nimport { rowElement } from './rowElement';\r\n\r\nexport function bodyElement(scroll: (e: CallbackEvent) => void, freeGrid: FreeGrid, rowPositionCache: rowCache[]) {\r\n    const styleBody = `\r\n            top:${freeGrid.config.panelHeight + freeGrid.config.headerHeight}px;\r\n            bottom:${freeGrid.config.footerHeight}px`;\r\n\r\n    const styleBodyContent = `\r\n            height:${(freeGrid.viewRows.length || 0) * freeGrid.config.rowHeight}px;\r\n            width:${freeGrid.config.columns.map(col => col.width || 100).reduce((total, num) => total + num)}px`;\r\n\r\n    return html`\r\n        <free-grid-body @scroll=${scroll} style=${styleBody} class=\"free-grid-body\">\r\n            <free-grid-body-content style=${styleBodyContent} class=\"free-grid-content\">\r\n                ${rowPositionCache.map(rowPosition => {\r\n                    return rowElement(freeGrid, freeGrid.viewRows[rowPosition.i], rowPosition);\r\n                })}\r\n            </free-grid-body-content>\r\n        </free-grid-body>\r\n    `;\r\n}\r\n","import { CallbackEvent, rowCache, IDataRow } from '../interfaces';\r\nimport { FreeGrid } from '..';\r\n\r\nimport { rowElementsCustomRender } from './rowElementsCustomRender';\r\nimport { rowElementsStandardRender } from './rowElementsStandardRender';\r\nimport { rowElementsGroupRender } from './rowElementsGroupRender';\r\n\r\nexport function rowElement(freeGrid: FreeGrid, rowData: IDataRow, rowPosition: rowCache) {\r\n    /** current left of column, so they stack nicely */\r\n\r\n    const display = rowData ? 'block' : 'none';\r\n\r\n    const freeGridRowStyle = `\r\n        display:${display};\r\n        height:${freeGrid.config.rowHeight}px;\r\n        transform:translate3d(0px, ${freeGrid.config.rowHeight * rowPosition.i}px, 0px);\r\n        width:${freeGrid.config.columns.map(col => col.width || 100).reduce((total, num) => total + num)}px`;\r\n\r\n    const rowClick = (e: CallbackEvent) => {\r\n        freeGrid.config.beforeSelectionChangeCallBackFn &&\r\n            freeGrid.config.beforeSelectionChangeCallBackFn(e, rowPosition.i, freeGrid);\r\n        freeGrid.selection.highlightRow(<any>e, rowPosition.i, freeGrid);\r\n\r\n        freeGrid.config.afterSelectionChangeCallBackFn &&\r\n            freeGrid.config.beforeSelectionChangeCallBackFn(e, rowPosition.i, freeGrid);\r\n    };\r\n    const config = freeGrid.config;\r\n\r\n    switch (true) {\r\n        case typeof config.rowRenderCallBackFn === 'function':\r\n            return rowElementsCustomRender(freeGridRowStyle, rowClick, freeGrid, rowPosition.i, rowData);\r\n        case rowData && (<IDataRow>rowData).__group:\r\n            return rowElementsGroupRender(freeGridRowStyle, rowClick, freeGrid, rowPosition.i, rowData);\r\n        default:\r\n            return rowElementsStandardRender(freeGridRowStyle, rowClick, freeGrid, rowPosition.i, rowData);\r\n    }\r\n}\r\n","import { FreeGrid } from '../';\r\nimport { html } from 'lit-html';\r\nimport { IDataRow } from '../interfaces';\r\n\r\nexport function rowElementsCustomRender(\r\n    freeGridRowStyle: string,\r\n    rowClick: Function,\r\n    freeGrid: FreeGrid,\r\n    rowNo: number,\r\n    rowData: IDataRow\r\n) {\r\n    return html`\r\n        <free-grid-row\r\n            style=${freeGridRowStyle}\r\n            class=\"free-grid-row ${freeGrid.selection.isSelected(rowNo) ? 'free-grid-selected-row' : ''}\"\r\n            @click=${rowClick}\r\n        >\r\n            ${freeGrid.config.rowRenderCallBackFn(html, null, rowNo, rowData, freeGrid)}\r\n        </free-grid-row>\r\n    `;\r\n}\r\n","import { FreeGrid } from '../';\r\nimport { html } from 'lit-html';\r\nimport { rowTextColumnElement } from './rowTextColumnElement';\r\nimport { rowCheckboxColumnElement } from './rowCheckboxColumnElement';\r\nimport { rowNumberColumnElement } from './rowNumberColumnElement';\r\nimport { rowImageColumnElement } from './rowImageColumnElement';\r\nimport { rowDateColumnElement } from './rowDateColumnElement';\r\nimport { CallbackEvent, IDataRow } from '../interfaces';\r\n\r\nexport function rowElementsStandardRender(\r\n    freeGridRowStyle: string,\r\n    rowClick: Function,\r\n    freeGrid: FreeGrid,\r\n    rowNo: number,\r\n    rowData: IDataRow\r\n) {\r\n    const grouping = freeGrid.config.groupingSet && freeGrid.config.groupingSet.length;\r\n    let curleft = rowData && grouping ? rowData.__groupLvl * 15 : 0;\r\n\r\n    return html`\r\n        <free-grid-row\r\n            style=${freeGridRowStyle}\r\n            class=\"free-grid-row ${freeGrid.selection.isSelected(rowNo) ? 'free-grid-selected-row' : ''}\"\r\n            @click=${rowClick}\r\n        >\r\n            <!-- ------------------------------ -->\r\n            <!-- We now get row based on config -->\r\n            <!-- ------------------------------ -->\r\n            ${html`\r\n                <free-grid-col\r\n                    class=\"free-grid-col free-grid-grouping-row\"\r\n                    style=\"width:${rowData && grouping ? rowData.__groupLvl * 15 : 0}px;left:0\"\r\n                >\r\n                </free-grid-col>\r\n            `}\r\n            ${freeGrid.config.columns.map(col => {\r\n                if (!col.hide) {\r\n                    // common style\r\n                    const colStyle = `width:${col.width || 100}px; left:${curleft}px`;\r\n                    const _data = rowData ? rowData[col.attribute] : '';\r\n\r\n                    // callback on cell edit\r\n                    const updateCallback = (e: CallbackEvent) => {\r\n                        col.beforeEditCallbackFn && col.beforeEditCallbackFn(e, col, rowNo, rowData, freeGrid);\r\n\r\n                        // filter out based on type so we know what type to use\r\n                        if (col.autoUpdateData !== false) {\r\n                            switch (col.type) {\r\n                                case 'boolean':\r\n                                    rowData[col.attribute] = e.target.checked;\r\n                                    break;\r\n                                case 'image':\r\n                                    // rowData[col.attribute] = e.target.checked;\r\n                                    // we need this ever ?\r\n                                    break;\r\n                                case 'date':\r\n                                    rowData[col.attribute] = e.target.valueAsDate;\r\n                                    break;\r\n                                case 'number':\r\n                                    rowData[col.attribute] = e.target.valueAsNumber;\r\n                                    break;\r\n                                default:\r\n                                    rowData[col.attribute] = e.target.value;\r\n                            }\r\n                        }\r\n\r\n                        col.afterEditCallbackFn && col.afterEditCallbackFn(e, col, rowNo, rowData, freeGrid);\r\n                    };\r\n\r\n                    let template;\r\n                    if (col.rowRenderCallBackFn) {\r\n                        // custom column, supply them with lit.html\r\n                        template = html`\r\n                            <free-grid-row-col style=${colStyle} class=\"free-grid-col\">\r\n                                ${col.rowRenderCallBackFn(html, col, rowNo, rowData, freeGrid)}\r\n                            </free-grid-row-col>\r\n                        `;\r\n                    } else {\r\n                        // only part seperating thiese are value type, use directive ?\r\n                        switch (col.type) {\r\n                            case 'boolean':\r\n                                template = rowCheckboxColumnElement(colStyle, col, updateCallback, _data);\r\n                                break;\r\n                            case 'image':\r\n                                template = rowImageColumnElement(colStyle, _data);\r\n                                break;\r\n                            case 'date':\r\n                                template = rowDateColumnElement(colStyle, col, updateCallback, _data);\r\n                                break;\r\n                            case 'number':\r\n                                template = rowNumberColumnElement(colStyle, col, updateCallback, _data);\r\n                                break;\r\n                            default:\r\n                                template = rowTextColumnElement(colStyle, col, updateCallback, _data);\r\n                        }\r\n                    }\r\n                    curleft = curleft + (col.width || 100);\r\n\r\n                    return template;\r\n                } else {\r\n                    return html``;\r\n                }\r\n            })}\r\n        </free-grid-row>\r\n    `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns, IDataRow } from '../interfaces';\r\nimport { eventIF } from '../eventIF';\r\n\r\nexport function rowTextColumnElement(colStyle: string, col: IColumns, updateCallback: Function, _data: IDataRow) {\r\n    return html`\r\n        <free-grid-row-col style=${colStyle} class=\"free-grid-col\">\r\n            <input\r\n                ?readonly=${col.readonly}\r\n                ?disabled=${col.disabled}\r\n                @custom=${eventIF(true, col.editEventType || 'change', updateCallback)}\r\n                type=\"${col.type || 'text'}\"\r\n                .value=${_data}\r\n                class=\"free-grid-row-input\"\r\n            />\r\n        </free-grid-row-col>\r\n    `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns } from '../interfaces';\r\nimport { eventIF } from '../eventIF';\r\n\r\nexport function rowCheckboxColumnElement(colStyle: string, col: IColumns, updateCallback: Function, _data: any) {\r\n    return html`\r\n        <free-grid-row-col style=${colStyle} class=\"free-grid-col\">\r\n            <input\r\n                ?readonly=${col.readonly}\r\n                ?disabled=${col.disabled}\r\n                @custom=${eventIF(true, col.editEventType || 'change', updateCallback)}\r\n                type=\"checkbox\"\r\n                .checked=${_data}\r\n                class=\"free-grid-row-checkbox-100\"\r\n            />\r\n        </free-grid-row-col>\r\n    `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns, IDataRow } from '../interfaces';\r\nimport { eventIF } from '../eventIF';\r\n\r\nexport function rowNumberColumnElement(colStyle: string, col: IColumns, updateCallback: Function, _data: IDataRow) {\r\n    return html`\r\n        <free-grid-row-col style=${colStyle} class=\"free-grid-col\">\r\n            <input\r\n                ?readonly=${col.readonly}\r\n                ?disabled=${col.disabled}\r\n                @custom=${eventIF(true, col.editEventType || 'change', updateCallback)}\r\n                type=${col.type}\r\n                .valueAsNumber=${_data}\r\n                class=\"free-grid-row-input\"\r\n            />\r\n        </free-grid-row-col>\r\n    `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IDataRow } from '../interfaces';\r\n\r\nexport function rowImageColumnElement(colStyle: string, _data: IDataRow) {\r\n    return html`\r\n        <free-grid-row-col style=${colStyle} class=\"free-grid-col\">\r\n            <img .src=${_data} class=\"free-grid-image-round\" />\r\n        </free-grid-row-col>\r\n    `;\r\n}\r\n","import { html } from 'lit-html';\r\nimport { IColumns, IDataRow } from '../interfaces';\r\nimport { eventIF } from '../eventIF';\r\n\r\nexport function rowDateColumnElement(colStyle: string, col: IColumns, updateCallback: Function, _data: IDataRow) {\r\n    return html`\r\n        <free-grid-row-col style=${colStyle} class=\"free-grid-col\">\r\n            <input\r\n                ?readonly=${col.readonly}\r\n                ?disabled=${col.disabled}\r\n                @custom=${eventIF(true, col.editEventType || 'change', updateCallback)}\r\n                type=${col.type}\r\n                .valueAsDate=${_data || null}\r\n                class=\"free-grid-row-input\"\r\n            />\r\n        </free-grid-row-col>\r\n    `;\r\n}\r\n","import { FreeGrid } from '../';\r\nimport { html, svg } from 'lit-html';\r\nimport { IDataRow } from '../interfaces';\r\n\r\nexport function rowElementsGroupRender(\r\n    freeGridRowStyle: string,\r\n    _rowClick: Function,\r\n    _freeGrid: FreeGrid,\r\n    _rowNo: number,\r\n    rowData: IDataRow\r\n) {\r\n    const changeGrouping = () => {\r\n        if (rowData.__groupExpanded) {\r\n            _freeGrid.arrayUtils.groupCollapse(rowData.__groupID);\r\n        } else {\r\n            _freeGrid.arrayUtils.groupExpand(rowData.__groupID);\r\n        }\r\n    };\r\n\r\n    const defaultMarkup = html`\r\n        <i @click=${changeGrouping}>\r\n            <svg class=\"free-grid-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\r\n                ${rowData.__groupExpanded\r\n                    ? svg`<path d=\"M4.8 7.5h6.5v1H4.8z\" />`\r\n                    : svg`<path d=\"M7.4 4.8v2.7H4.7v1h2.7v3h1v-3h2.8v-1H8.5V4.8h-1z\" />`}\r\n            </svg></i\r\n        ><span> ${rowData.__groupName} (${rowData.__groupTotal})</span>\r\n    `;\r\n\r\n    return html`\r\n        <free-grid-row style=${freeGridRowStyle} class=\"free-grid-row free-grid-grouping-row\">\r\n            ${rowData.__groupLvl\r\n                ? html`\r\n                      <free-grid-col\r\n                          class=\"free-grid-col free-grid-grouping-row\"\r\n                          style=\"width:${rowData.__groupLvl ? rowData.__groupLvl * 15 : 0}px;left:0\"\r\n                      >\r\n                      </free-grid-col>\r\n                  `\r\n                : ''}\r\n            ${html`\r\n                <free-grid-col\r\n                    class=\"free-grid-col-group\"\r\n                    style=\"left:${rowData.__groupLvl ? rowData.__groupLvl * 15 : 0}px;right:0\"\r\n                >\r\n                    ${defaultMarkup}\r\n                </free-grid-col>\r\n            `}\r\n        </free-grid-row>\r\n    `;\r\n}\r\n","import { html, TemplateResult } from 'lit-html';\r\nimport { FreeGrid } from '..';\r\n\r\nexport function footerElement(freeGrid: FreeGrid): TemplateResult {\r\n    if (freeGrid.config.footerHeight < 1) {\r\n        freeGrid.config.footerHeight = 1; // always have 1 px\r\n    }\r\n\r\n    if (freeGrid.config.footerRenderCallBackFn) {\r\n        return html`\r\n            <free-grid-footer style=\"height:${freeGrid.config.footerHeight}px\" class=\"free-grid-footer\"\r\n                >${freeGrid.config.footerRenderCallBackFn(freeGrid, null, null, null, null)}</free-grid-footer\r\n            >\r\n        `;\r\n    } else {\r\n        return html`\r\n            <free-grid-footer style=\"height:${freeGrid.config.footerHeight}px\" class=\"free-grid-footer\"></free-grid-footer>\r\n        `;\r\n    }\r\n}\r\n","import { FreeGrid } from '.';\r\n\r\nexport class Selection {\r\n    // private mode: 'none' | 'single' | 'multiple';\r\n    private selectedRows: number;\r\n    private selection: Set<number>;\r\n    private lastRowSelected: number;\r\n    private lastKeyKodeUsed: string;\r\n    private key = 0;\r\n    private grid: FreeGrid;\r\n\r\n    constructor(grid: FreeGrid) {\r\n        this.grid = grid;\r\n        this.selectedRows = 0;\r\n        this.selection = new Set([]);\r\n    }\r\n\r\n    public getKey() {\r\n        this.key++;\r\n\r\n        return this.key;\r\n    }\r\n\r\n    public isSelected(row: number): boolean {\r\n        let result = false;\r\n        if (this.selectedRows > 0) {\r\n            result = this.selection.has(this.getRowKey(row));\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    public deSelectAll(): void {\r\n        this.selection.clear();\r\n        this.selectedRows = this.selection.size;\r\n    }\r\n\r\n    public highlightRow(e: MouseEvent, currentRow: number, freeGrid: FreeGrid): void {\r\n        let isSel: boolean;\r\n        let currentselectedRows = this.getSelectedRows();\r\n        let currentKeyKode = '';\r\n\r\n        if (currentRow !== this.lastRowSelected || currentselectedRows[0] !== currentRow) {\r\n            if (currentRow <= freeGrid.viewRows.length - 1) {\r\n                // do I need to check this?\r\n\r\n                if (freeGrid.config.selectionMode === 'multiple') {\r\n                    // if multiselect duh!\r\n\r\n                    if (e.shiftKey) {\r\n                        currentKeyKode = 'shift';\r\n                        currentselectedRows = this.getSelectedRows();\r\n                        if (currentselectedRows.length > 0 && this.lastKeyKodeUsed === 'none') {\r\n                            this.lastRowSelected = currentselectedRows[0];\r\n                            this.lastKeyKodeUsed = 'shift';\r\n                        }\r\n                    }\r\n\r\n                    if (e.ctrlKey) {\r\n                        currentKeyKode = 'ctrl';\r\n                    }\r\n\r\n                    if (!e.ctrlKey && !e.shiftKey) {\r\n                        currentKeyKode = 'none';\r\n                    }\r\n\r\n                    switch (true) {\r\n                        case currentKeyKode === 'none':\r\n                            this.select(currentRow, false);\r\n                            break;\r\n                        case this.lastKeyKodeUsed === 'shift' && currentKeyKode === 'ctrl':\r\n                            isSel = this.isSelected(currentRow);\r\n                            if (isSel === true) {\r\n                                this.deSelect(currentRow);\r\n                            } else {\r\n                                this.select(currentRow, true);\r\n                            }\r\n                            this.lastRowSelected = currentRow;\r\n                            break;\r\n\r\n                        case this.lastKeyKodeUsed === 'ctrl' && currentKeyKode === 'shift':\r\n                            const oldSel = this.getSelectedRows();\r\n                            this.selectRange(this.lastRowSelected, currentRow);\r\n                            const newSel = this.getSelectedRows();\r\n                            this.setSelectedRows(oldSel.concat(newSel));\r\n\r\n                            break;\r\n\r\n                        case this.lastKeyKodeUsed === 'ctrl' && currentKeyKode === 'ctrl':\r\n                            isSel = this.isSelected(currentRow);\r\n                            if (isSel === true) {\r\n                                this.deSelect(currentRow);\r\n                            } else {\r\n                                this.select(currentRow, true);\r\n                            }\r\n                            this.lastRowSelected = currentRow;\r\n                            break;\r\n\r\n                        case this.lastKeyKodeUsed === 'none' && currentKeyKode === 'ctrl':\r\n                            isSel = this.isSelected(currentRow);\r\n                            if (isSel === true) {\r\n                                this.deSelect(currentRow);\r\n                            } else {\r\n                                this.select(currentRow, true);\r\n                            }\r\n                            this.lastRowSelected = currentRow;\r\n                            break;\r\n\r\n                        case this.lastKeyKodeUsed === 'shift' && currentKeyKode === 'shift':\r\n                            if (this.lastRowSelected > currentRow) {\r\n                                this.selectRange(currentRow, this.lastRowSelected);\r\n                            } else {\r\n                                this.selectRange(this.lastRowSelected, currentRow);\r\n                            }\r\n\r\n                            break;\r\n\r\n                        case this.lastKeyKodeUsed === 'none' && currentKeyKode === 'shift':\r\n                            if (this.lastRowSelected !== -1) {\r\n                                if (this.lastRowSelected > currentRow) {\r\n                                    this.selectRange(currentRow, this.lastRowSelected);\r\n                                } else {\r\n                                    this.selectRange(this.lastRowSelected, currentRow);\r\n                                }\r\n                            } else {\r\n                                this.lastRowSelected = currentRow;\r\n                                this.select(currentRow, false);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            console.error('error, this should not happen, debug selection');\r\n                    }\r\n                } else {\r\n                    this.select(currentRow, false);\r\n                }\r\n                this.lastKeyKodeUsed = currentKeyKode;\r\n\r\n                // update selection on rows\r\n                freeGrid.reRender();\r\n            }\r\n        } else {\r\n            // same row clicked again\r\n            if (e.ctrlKey) {\r\n                currentKeyKode = 'ctrl';\r\n            }\r\n\r\n            // if ctrl button we want to remove selection\r\n            if (currentKeyKode === 'ctrl') {\r\n                this.lastKeyKodeUsed = currentKeyKode;\r\n                isSel = this.isSelected(currentRow);\r\n                if (isSel === true) {\r\n                    this.deSelect(currentRow);\r\n                }\r\n                this.lastRowSelected = currentRow;\r\n            } else {\r\n                // else we just want to make it current..\r\n                this.select(currentRow, false);\r\n            }\r\n            // update selection on rows\r\n            freeGrid.reRender();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * todo, optional key\r\n     */\r\n    private getRowKey(row: number): number {\r\n        return (this.grid.viewRows[row] as any) && (this.grid.viewRows[row] as any).__fg_key;\r\n    }\r\n\r\n    private getRowKeys(): any[] {\r\n        const keys: number[] | string[] = [];\r\n        (this.grid.viewRows as any).forEach((data: any) => {\r\n            keys.push(data.__fg_key);\r\n        });\r\n\r\n        return keys;\r\n    }\r\n\r\n    private deSelect(row: number): void {\r\n        this.selection.delete(this.getRowKey(row));\r\n        this.selectedRows = this.selection.size;\r\n    }\r\n\r\n    private select(row: number, add?: boolean): void {\r\n        switch (this.grid.config.selectionMode) {\r\n            case 'none':\r\n            case null:\r\n            case undefined:\r\n                break;\r\n            case 'single':\r\n                this.selection.clear();\r\n                this.selection.add(this.getRowKey(row));\r\n                this.selectedRows = this.selection.size;\r\n                break;\r\n            case 'multiple':\r\n                if (!add) {\r\n                    this.selection.clear();\r\n                    this.selection.add(this.getRowKey(row));\r\n                    this.selectedRows = this.selection.size;\r\n                } else {\r\n                    this.selection.add(this.getRowKey(row));\r\n                    this.selectedRows = this.selection.size;\r\n                }\r\n                break;\r\n            default:\r\n            // nothing-> warn ?\r\n        }\r\n    }\r\n\r\n    private selectRange(start: number, end: number): void {\r\n        if (this.grid.config.selectionMode === 'multiple') {\r\n            this.selection.clear();\r\n            for (let i = start; i < end + 1; i++) {\r\n                this.selection.add(this.getRowKey(i));\r\n            }\r\n            this.selectedRows = this.selection.size;\r\n        }\r\n    }\r\n\r\n    private getSelectedRows(): number[] {\r\n        const array: number[] = [];\r\n        const keys = this.getRowKeys();\r\n        if (this.selectedRows > 0) {\r\n            keys.forEach((key, index) => {\r\n                if (this.selection.has(key) === true) {\r\n                    array.push(index);\r\n                }\r\n            });\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    private setSelectedRows(newRows: number[]): void {\r\n        if (this.selectedRows > 0) {\r\n            this.selection.clear();\r\n        }\r\n        for (let i = 0; i < newRows.length; i++) {\r\n            this.selection.add(this.getRowKey(newRows[i]));\r\n        }\r\n        this.selectedRows = this.selection.size;\r\n    }\r\n}\r\n","import { ArrayFilter } from './arrayFilter';\r\nimport { ArraySort } from './arraySort';\r\nimport { ArrayGrouping } from './arrayGrouping';\r\nimport { ISortObjectInterface, IFilterObj, IDataRow, IGroupingObj, CallbackEvent, IColumns } from './interfaces';\r\nimport { FreeGrid } from './';\r\n\r\n/**\r\n * Helper class for calling internal sort, filter and grouping classes\r\n *\r\n */\r\nexport class ArrayUtils {\r\n    public arrayFilter: ArrayFilter;\r\n    public arraySort: ArraySort;\r\n    public arrayGrouping: ArrayGrouping;\r\n    public sortCallbackBinded: (event: CallbackEvent, col: IColumns, freeGrid: FreeGrid) => void;\r\n    public filterCallbackBinded: (event: CallbackEvent, col: IColumns, freeGrid: FreeGrid) => void;\r\n    public groupingCallbackBinded: (event: CallbackEvent, col: IColumns, freeGrid: FreeGrid) => void;\r\n    private freeGrid: FreeGrid;\r\n    public removeGroupBinded: any;\r\n\r\n    constructor(freeGrid: FreeGrid) {\r\n        this.arrayFilter = new ArrayFilter();\r\n        this.arraySort = new ArraySort();\r\n        this.arrayGrouping = new ArrayGrouping();\r\n        this.sortCallbackBinded = this.sortCallback.bind(this);\r\n        this.filterCallbackBinded = this.filterCallback.bind(this);\r\n        this.groupingCallbackBinded = this.groupingCallback.bind(this);\r\n        this.removeGroupBinded = this.removeGroup.bind(this);\r\n        this.freeGrid = freeGrid;\r\n    }\r\n\r\n    public orderBy(\r\n        collection: IDataRow[],\r\n        attribute: string | ISortObjectInterface,\r\n        addToCurrentSort?: boolean\r\n    ): { fixed: IDataRow[]; full: IDataRow[] } {\r\n        const groupingFields = this.getGrouping().map((data: IGroupingObj) => data.field);\r\n        const grouping = this.getGrouping();\r\n        let result: { fixed: IDataRow[]; full: IDataRow[] } = {\r\n            fixed: null,\r\n            full: null\r\n        };\r\n\r\n        if (groupingFields.length > 0) {\r\n            // get last sort\r\n            const lastSort = this.getOrderBy();\r\n\r\n            // reset sort\r\n            this.resetSort();\r\n\r\n            // loop\r\n            let exist = false;\r\n\r\n            // if not adding, create new sort array\r\n            let newSort: ISortObjectInterface[] = [];\r\n\r\n            let count = 0;\r\n            // loop existing\r\n            if (!attribute) {\r\n                newSort = lastSort;\r\n            } else {\r\n                lastSort.forEach((sort: ISortObjectInterface) => {\r\n                    count++;\r\n                    if (groupingFields.indexOf(sort.attribute) !== -1 || addToCurrentSort) {\r\n                        newSort.push(sort);\r\n                        if (sort.attribute === attribute) {\r\n                            sort.asc = sort.asc === true ? false : true;\r\n                            sort.no = count;\r\n                            exist = true;\r\n                        }\r\n                    } else {\r\n                        if (sort.attribute === attribute) {\r\n                            sort.asc = sort.asc === true ? false : true;\r\n                            sort.no = count;\r\n                            exist = true;\r\n                            newSort.push(sort);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            // set last sort\r\n            this.setLastSort(newSort);\r\n\r\n            // if it does not exist, then add\r\n            if (!exist && attribute) {\r\n                this.setOrderBy(attribute, true);\r\n            }\r\n\r\n            // run orderby\r\n            this.runOrderbyOn(collection);\r\n\r\n            // regroup\r\n            const groupedArray = this.group(collection, grouping, true);\r\n            // set result\r\n            result = {\r\n                fixed: groupedArray,\r\n                full: collection\r\n            };\r\n        } else {\r\n            if (!attribute) {\r\n                // no attribute, just reset last sort...\r\n                const lastSort = this.getOrderBy();\r\n                this.resetSort();\r\n                this.setLastSort(lastSort);\r\n                this.runOrderbyOn(collection);\r\n                result = {\r\n                    fixed: collection,\r\n                    full: collection\r\n                };\r\n            } else {\r\n                this.setOrderBy(attribute, addToCurrentSort);\r\n                this.runOrderbyOn(collection);\r\n                result = {\r\n                    fixed: collection,\r\n                    full: collection\r\n                };\r\n            }\r\n        }\r\n        this.freeGrid.config.sortingSet = this.arraySort.getOrderBy();\r\n\r\n        return result;\r\n    }\r\n\r\n    public getGrouping(): IGroupingObj[] {\r\n        return this.arrayGrouping.getGrouping();\r\n    }\r\n\r\n    public setGrouping(g: IGroupingObj[]) {\r\n        this.arrayGrouping.setGrouping(g);\r\n    }\r\n\r\n    public getExpanded() {\r\n        return this.arrayGrouping.getExpanded();\r\n    }\r\n\r\n    public setExpanded(x: string[]) {\r\n        this.arrayGrouping.setExpanded(x);\r\n    }\r\n\r\n    public groupCollapse(id: string): void {\r\n        this.freeGrid.viewRows = this.arrayGrouping.collapseOneOrAll(id);\r\n        this.freeGrid.config.groupingExpanded = this.arrayGrouping.getExpanded();\r\n        this.freeGrid.reRender();\r\n    }\r\n\r\n    public groupExpand(id: string): void {\r\n        this.freeGrid.viewRows = this.arrayGrouping.expandOneOrAll(id);\r\n        this.freeGrid.config.groupingExpanded = this.arrayGrouping.getExpanded();\r\n        this.freeGrid.reRender();\r\n    }\r\n\r\n    public getOrderBy(): ISortObjectInterface[] {\r\n        return this.arraySort.getOrderBy();\r\n    }\r\n\r\n    public setLastSort(array: ISortObjectInterface[]): void {\r\n        this.arraySort.setLastSort(array);\r\n    }\r\n\r\n    public setOrderBy(attribute: string | ISortObjectInterface | ISortObjectInterface[], addToCurrentSort?: boolean): void {\r\n        this.arraySort.setOrderBy(attribute, addToCurrentSort);\r\n    }\r\n\r\n    public runOrderbyOn(array: IDataRow[]): void {\r\n        this.arraySort.runOrderbyOn(array);\r\n    }\r\n\r\n    public resetSort(defaultSortAttribute?: string): void {\r\n        this.arraySort.reset(defaultSortAttribute);\r\n    }\r\n\r\n    public resetGrouping(): void {\r\n        this.arrayGrouping.reset();\r\n    }\r\n\r\n    public getCurrentFilter(): IFilterObj[] {\r\n        return this.arrayFilter.getLastFilter();\r\n    }\r\n\r\n    private group(array: IDataRow[], grouping: IGroupingObj[], keepExpanded: boolean): IDataRow[] {\r\n        const x = this.arrayGrouping.group(array, grouping, keepExpanded);\r\n        this.freeGrid.config.groupingExpanded = this.arrayGrouping.getExpanded();\r\n\r\n        return x;\r\n    }\r\n\r\n    private removeGroup(group: IGroupingObj) {\r\n        const currentGrouping = this.getGrouping();\r\n        const x = currentGrouping.indexOf(group);\r\n        if (x !== -1) {\r\n            currentGrouping.splice(x, 1);\r\n        }\r\n\r\n        if (currentGrouping.length) {\r\n            const newdata = this.group(this.freeGrid.activeData, currentGrouping, true);\r\n            this.freeGrid.viewRows = newdata;\r\n        } else {\r\n            this.freeGrid.viewRows = this.freeGrid.activeData;\r\n        }\r\n        this.freeGrid.reRender();\r\n    }\r\n\r\n    private groupingCallback(_event: CallbackEvent, col: IColumns, freeGrid: FreeGrid) {\r\n        let newF = col ? true : false;\r\n        const groupings: IGroupingObj[] = this.freeGrid.config.groupingSet || [];\r\n        col &&\r\n            groupings.forEach(g => {\r\n                if (g.field === col.attribute) {\r\n                    newF = false;\r\n                }\r\n            });\r\n\r\n        if (newF) {\r\n            groupings.push({ title: col.header, field: col.attribute });\r\n        }\r\n        this.arraySort.clearConfigSort(freeGrid.config.columns);\r\n        this.arraySort.reset();\r\n        groupings.forEach((group: IGroupingObj) => {\r\n            this.arraySort.setOrderBy(group.field, true);\r\n        });\r\n        this.arraySort.runOrderbyOn(this.freeGrid.activeData);\r\n        this.arraySort.SetConfigSort(freeGrid.config.columns);\r\n        if (groupings.length) {\r\n            const result = this.group(this.freeGrid.activeData, groupings, true);\r\n            this.freeGrid.config.groupingSet = this.getGrouping();\r\n            this.freeGrid.config.sortingSet = this.getOrderBy();\r\n            this.freeGrid.viewRows = result;\r\n        } else {\r\n            this.freeGrid.viewRows = this.freeGrid.activeData;\r\n        }\r\n        freeGrid.reRender();\r\n    }\r\n\r\n    private sortCallback(event: CallbackEvent, col: IColumns, freeGrid: FreeGrid) {\r\n        // toggle sort\r\n        const sortAsc = col.sortable.sortAscending === null ? true : col.sortable.sortAscending ? false : true;\r\n\r\n        // clear config, so it can be set after new sort\r\n        this.arraySort.clearConfigSort(freeGrid.config.columns);\r\n\r\n        // sort, update config, set viewRows and rerender\r\n        const result = this.orderBy(freeGrid.activeData, { attribute: col.attribute, asc: sortAsc }, (<any>event).shiftKey);\r\n        this.freeGrid.config.sortingSet = this.getOrderBy();\r\n        this.arraySort.SetConfigSort(freeGrid.config.columns);\r\n        this.freeGrid.viewRows = result.fixed;\r\n        freeGrid.reRender();\r\n    }\r\n\r\n    private filterCallback(event: CallbackEvent, col: IColumns, freeGrid: FreeGrid) {\r\n        // depending on col type we need to get data from correct value\r\n        switch (col.type) {\r\n            case 'date':\r\n                col.filterable.currentValue = new Date(event.target.valueAsDate);\r\n                break;\r\n            case 'number':\r\n                col.filterable.currentValue = event.target.valueAsNumber;\r\n                break;\r\n            case 'boolean':\r\n                col.filterable.currentValue = event.target.indeterminate ? null : event.target.checked;\r\n                break;\r\n            default:\r\n                col.filterable.currentValue = event.target.value;\r\n        }\r\n\r\n        const filter: IFilterObj[] = [];\r\n        freeGrid.config.columns.forEach(col => {\r\n            const f = col.filterable;\r\n            if (f && (f.currentValue !== null && f.currentValue !== undefined)) {\r\n                filter.push({\r\n                    attribute: col.attribute,\r\n                    type: col.type || 'text',\r\n                    operator: f.operator\r\n                        ? this.arrayFilter.operators[f.operator]\r\n                        : this.arrayFilter.operators[this.arrayFilter.getFilterFromType(col.type)],\r\n                    value: f.currentValue\r\n                });\r\n            }\r\n        });\r\n        freeGrid.activeData = this.arrayFilter.runQueryOn(freeGrid.data, filter);\r\n        const result = this.orderBy(freeGrid.activeData, null, false);\r\n        this.arraySort.SetConfigSort(freeGrid.config.columns);\r\n        this.freeGrid.viewRows = result.fixed;\r\n        this.freeGrid.reRender();\r\n    }\r\n}\r\n","import { IFilterObj } from './interfaces';\r\n\r\nexport class ArrayFilter {\r\n    private lastFilter: IFilterObj[];\r\n    public operators: any = {\r\n        EQUAL: 1,\r\n        LESS_THAN_OR_EQUAL_TO: 2,\r\n        GREATER_THAN_OR_EQUAL_TO: 3,\r\n        LESS_THAN: 4,\r\n        GREATER_THAN: 5,\r\n        CONTAINS: 6,\r\n        NOT_EQUAL_TO: 7,\r\n        DOES_NOT_CONTAIN: 8,\r\n        BEGIN_WITH: 9,\r\n        END_WITH: 10\r\n    };\r\n\r\n    constructor() {\r\n        this.lastFilter = [];\r\n    }\r\n\r\n    public getLastFilter(): IFilterObj[] {\r\n        return this.lastFilter;\r\n    }\r\n\r\n    public getFilterFromType(type: string) {\r\n        switch (type) {\r\n            case 'date':\r\n            case 'number':\r\n                return 'GREATER_THAN';\r\n            case 'bool':\r\n                return 'EQUAL_TO';\r\n            default:\r\n                return 'BEGIN_WITH';\r\n        }\r\n    }\r\n\r\n    public runQueryOn(objArray: object[], ObjFilter: IFilterObj[]) {\r\n        this.lastFilter = ObjFilter;\r\n\r\n        const resultArray = objArray.filter(data => {\r\n            // lets have true as default, so all that should not be there we set false..\r\n            let result = true;\r\n            ObjFilter.forEach((x: IFilterObj) => {\r\n                // vars\r\n                let rowValue: any;\r\n                let filterValue: any;\r\n                let filterOperator = x.operator;\r\n                let newFilterOperator: number;\r\n                const type: string = x.type;\r\n\r\n                // helper for boolean\r\n                const typeBool: { true: boolean; false: boolean } = {\r\n                    true: true,\r\n                    false: false\r\n                };\r\n\r\n                // lets set some defaults/corrections if its all wrong\r\n                switch (type) {\r\n                    case 'number':\r\n                        rowValue = data[x.attribute];\r\n                        filterValue = Number(x.value);\r\n                        if (!filterValue) {\r\n                            // needs to be 0\r\n                            filterValue = 0;\r\n                        }\r\n                        filterOperator = filterOperator || 1;\r\n                        if (filterOperator === 6) {\r\n                            filterOperator = 1;\r\n                        }\r\n                        break;\r\n                    case 'string':\r\n                        if (data[x.attribute] === null || data[x.attribute] === undefined) {\r\n                            rowValue = '';\r\n                        } else {\r\n                            rowValue = data[x.attribute].toLowerCase();\r\n                        }\r\n                        filterValue = x.value.toLowerCase();\r\n                        filterOperator = filterOperator || 9;\r\n                        newFilterOperator = filterOperator;\r\n\r\n                        // if filter operator is BEGIN WITH\r\n                        if (x.value.charAt(0) === '*' && filterOperator === 9) {\r\n                            newFilterOperator = 6;\r\n                            filterValue = filterValue.substr(1, filterValue.length);\r\n                        }\r\n\r\n                        // if filter operator is EQUAL TO\r\n                        // wildcard first = end with\r\n                        if (x.value.charAt(0) === '*' && filterOperator === 1) {\r\n                            newFilterOperator = 10;\r\n                            filterValue = filterValue.substr(1, filterValue.length);\r\n                        }\r\n\r\n                        // wildcard end and first = contains\r\n                        if (x.value.charAt(x.value.length - 1) === '*' && filterOperator === 1 && newFilterOperator === 10) {\r\n                            newFilterOperator = 6;\r\n                            filterValue = filterValue.substr(0, filterValue.length - 1);\r\n                        }\r\n\r\n                        // begin with since wildcard is in the end\r\n                        if (\r\n                            x.value.charAt(x.value.length - 1) === '*' &&\r\n                            filterOperator === 1 &&\r\n                            newFilterOperator !== 10 &&\r\n                            newFilterOperator !== 6\r\n                        ) {\r\n                            newFilterOperator = 9;\r\n                            filterValue = filterValue.substr(0, filterValue.length - 1);\r\n                        }\r\n\r\n                        // set the filteroperator from new if changed\r\n                        if (filterOperator !== newFilterOperator) {\r\n                            filterOperator = newFilterOperator;\r\n                        }\r\n                        break;\r\n                    case 'boolean':\r\n                        rowValue = data[x.attribute];\r\n                        filterValue = typeBool[x.value];\r\n                        filterOperator = 1;\r\n                        break;\r\n\r\n                    default:\r\n                        // todo: take the stuff under equal to and put in a function\r\n                        // and also call i from here.. or just make it fail?\r\n                        try {\r\n                            rowValue = data[x.attribute].toLowerCase();\r\n                        } catch (err) {\r\n                            rowValue = data[x.attribute];\r\n                        }\r\n                        try {\r\n                            filterValue = x.value.toLowerCase();\r\n                        } catch (err) {\r\n                            filterValue = x.value;\r\n                        }\r\n                        filterOperator = filterOperator || 1;\r\n                        break;\r\n                }\r\n\r\n                // filter from what operator used\r\n                switch (filterOperator) {\r\n                    case 1: // equal\r\n                        if (rowValue !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 2: // less or equal\r\n                        if (!(rowValue <= filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 3: // greater or equal\r\n                        if (!(rowValue >= filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 4: // greate\r\n                        if (!(rowValue < filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 5: // greater\r\n                        if (!(rowValue > filterValue)) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 6: // contains\r\n                        if (rowValue.indexOf(filterValue) === -1) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 7: // not equal to\r\n                        if (rowValue === filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 8: // does not contain\r\n                        if (rowValue.indexOf(filterValue) !== -1) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 9: // begin with\r\n                        if (rowValue.substring(0, filterValue.length) !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    case 10: // end with\r\n                        if (rowValue.substring(rowValue.length - filterValue.length, rowValue.length) !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if (rowValue !== filterValue) {\r\n                            result = false;\r\n                        }\r\n                }\r\n                if (type === 'string') {\r\n                    if (x.value.charAt(0) === '*' && x.value.length === 1) {\r\n                        result = true;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return result;\r\n        });\r\n\r\n        return resultArray;\r\n    }\r\n}\r\n","import { IColumns, ISortObjectInterface } from './interfaces';\r\n\r\nexport class ArraySort {\r\n    private lastSort: ISortObjectInterface[];\r\n    private curSort: ISortObjectInterface[];\r\n    private localeCompareCode: string;\r\n    private localeCompareOptions: any;\r\n\r\n    constructor() {\r\n        this.lastSort = [];\r\n        this.curSort = [];\r\n        this.localeCompareCode = null;\r\n        this.localeCompareOptions = { sensitivity: 'base' };\r\n    }\r\n\r\n    public setLocaleCompare(code: string, options?: any): void {\r\n        this.localeCompareCode = code ? code : null;\r\n        this.localeCompareOptions = options ? options : { sensitivity: 'base' };\r\n    }\r\n\r\n    public reset(defaultSortAttribute?: string): void {\r\n        if (defaultSortAttribute) {\r\n            this.lastSort = [{ attribute: defaultSortAttribute, asc: true, no: 0 }];\r\n            this.curSort = [{ attribute: defaultSortAttribute, asc: true, no: 0 }];\r\n        } else {\r\n            this.lastSort = [];\r\n            this.curSort = [];\r\n        }\r\n    }\r\n\r\n    public SetConfigSort(configColumns: IColumns[]) {\r\n        const attribute: string[] = [];\r\n        const asc: boolean[] = [];\r\n        const no: number[] = [];\r\n        this.lastSort.forEach(x => {\r\n            attribute.push(x.attribute);\r\n            asc.push(x.asc);\r\n            no.push(x.no);\r\n        });\r\n        configColumns.forEach(col => {\r\n            const i = attribute.indexOf(col.attribute);\r\n            if (i !== -1) {\r\n                col.sortable.sortAscending = asc[i] === true;\r\n                col.sortable.sortNo = no[i];\r\n            } else {\r\n                col.sortable.sortAscending = null;\r\n                col.sortable.sortNo = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public clearConfigSort(configColumns: IColumns[]) {\r\n        configColumns.forEach(col => {\r\n            if (col.sortable) {\r\n                col.sortable.sortAscending = null;\r\n                col.sortable.sortNo = null;\r\n            }\r\n        });\r\n    }\r\n\r\n    public setLastSort(array: ISortObjectInterface[]): void {\r\n        this.lastSort = array;\r\n        this.curSort = array;\r\n    }\r\n\r\n    public setOrderBy(param: ISortObjectInterface | string | ISortObjectInterface[], add?: boolean): void {\r\n        if (Array.isArray(param)) {\r\n            this.lastSort = param;\r\n            this.curSort = param;\r\n        } else {\r\n            let sort: any;\r\n            const useSetValue = false;\r\n            if (typeof param === 'string') {\r\n                sort = {\r\n                    attribute: param,\r\n                    asc: true\r\n                };\r\n            } else {\r\n                if (param.asc === undefined) {\r\n                    sort = {\r\n                        attribute: param.attribute,\r\n                        asc: true\r\n                    };\r\n                } else {\r\n                    sort = {\r\n                        attribute: param.attribute,\r\n                        asc: param.asc\r\n                    };\r\n                }\r\n            }\r\n\r\n            // do we add or is it the first one\r\n            if (add && this.lastSort.length > 0) {\r\n                // its adding, so lets get last one\r\n                this.curSort = this.lastSort;\r\n                let exist = false;\r\n\r\n                // loop to se if it exist from before\r\n                this.curSort.forEach(x => {\r\n                    if (x.attribute === sort.attribute) {\r\n                        exist = true;\r\n                        x.asc = sort.asc;\r\n                    }\r\n                });\r\n\r\n                // if it dont exist we add it, else there isnt anythin else to do for now\r\n                if (!exist) {\r\n                    this.curSort.push(sort);\r\n                    this.curSort[this.curSort.length - 1].no = this.curSort.length;\r\n                }\r\n                this.lastSort = this.curSort;\r\n            } else {\r\n                // if not adding, just set it\r\n                this.curSort = [sort];\r\n                this.curSort[0].no = 1;\r\n                if (this.lastSort[0]) {\r\n                    if (this.lastSort[0].attribute === this.curSort[0].attribute) {\r\n                        if (this.lastSort[0].asc === this.curSort[0].asc) {\r\n                            if (!useSetValue) {\r\n                                this.curSort[0].asc = this.curSort[0].asc === true ? false : true;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                this.lastSort = this.curSort;\r\n            }\r\n        }\r\n    }\r\n\r\n    public getOrderBy(): ISortObjectInterface[] {\r\n        return this.curSort;\r\n    }\r\n\r\n    public runOrderbyOn(array: object[]): void {\r\n        // super simple for now.. atleast I have som form for sort\r\n        const thisSort = this.getOrderBy();\r\n\r\n        // this is mix from different sources... from what I can tell it works now\r\n        array.sort((obj1: object, obj2: object) => {\r\n            let result = 0;\r\n\r\n            for (let i = 0; i < thisSort.length && result === 0; ++i) {\r\n                // loop until all are sorted\r\n                const currentObj = thisSort[i];\r\n                const v1 = obj1[currentObj.attribute];\r\n                const v2 = obj2[currentObj.attribute];\r\n\r\n                // compares with locale\r\n                const getLocaleCompareResult = (x1: string, x2: string): number => {\r\n                    let resultLocale = null;\r\n                    if (this.localeCompareCode) {\r\n                        resultLocale = x1.localeCompare(x2, this.localeCompareCode, this.localeCompareOptions);\r\n                    } else {\r\n                        resultLocale = x1.localeCompare(x2);\r\n                    }\r\n\r\n                    return resultLocale;\r\n                };\r\n\r\n                if (v1 !== v2) {\r\n                    if (currentObj.asc) {\r\n                        // ASC\r\n                        if (typeof v1 === 'string' && typeof v1 === 'string') {\r\n                            if (getLocaleCompareResult(v1, v2) < 0 && getLocaleCompareResult(v1, v2) !== 0) {\r\n                                result = -1;\r\n                            } else {\r\n                                result = 1;\r\n                            }\r\n                        } else {\r\n                            if (v1 < v2) {\r\n                                result = -1;\r\n                            } else {\r\n                                result = 1;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (typeof v1 === 'string' && typeof v1 === 'string') {\r\n                            if (getLocaleCompareResult(v1, v2) < 0 && getLocaleCompareResult(v1, v2) !== 0) {\r\n                                result = 1;\r\n                            } else {\r\n                                result = -1;\r\n                            }\r\n                        } else {\r\n                            if (v1 < v2) {\r\n                                result = 1;\r\n                            } else {\r\n                                result = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        });\r\n\r\n        // set current sort as last sort that was used\r\n        this.lastSort = this.getOrderBy().slice(0);\r\n    }\r\n}\r\n","import { IDataRow, IGroupingObj } from './interfaces';\r\n\r\n/**\r\n * This takes care the generating the flat array the grid can use for grouping\r\n *\r\n */\r\nexport class ArrayGrouping {\r\n    private groups: IDataRow[][];\r\n    private grouping: IGroupingObj[];\r\n    private expanded: Set<string>;\r\n\r\n    constructor() {\r\n        this.grouping = [];\r\n        this.expanded = new Set([]);\r\n    }\r\n\r\n    public reset() {\r\n        this.groups = [];\r\n        this.grouping = [];\r\n        this.expanded = new Set([]);\r\n    }\r\n\r\n    public group(arrayToGroup: IDataRow[], grouping: IGroupingObj[], keepExpanded?: boolean) {\r\n        // if grouping\r\n        if (grouping.length > 0) {\r\n            // temp holder for groups as we create them\r\n            if (!keepExpanded) {\r\n                this.expanded = new Set([]);\r\n            }\r\n\r\n            // variable to hold our groups\r\n            const groups: IDataRow[][] = [];\r\n\r\n            grouping.forEach((groupBy, groupNo) => {\r\n                if (groupNo === 0) {\r\n                    // create main group and add to groups array\r\n                    const mainGroup = this.createMainGrouping(arrayToGroup, groupBy.field, groupNo);\r\n                    groups.push(mainGroup);\r\n                } else {\r\n                    // get last group created, and group children\r\n                    const childGroupArray = groups[groups.length - 1];\r\n                    const newSubGroup = this.groupChildren(childGroupArray, groupBy.field, groupNo);\r\n                    groups.push(newSubGroup);\r\n                }\r\n            });\r\n\r\n            // set to our class wo we have it for later\r\n            this.groups = groups;\r\n\r\n            // set to clas so we can get it later\r\n            this.grouping = grouping;\r\n\r\n            // do we want what was expanded still to be expanded, if so just return firts grouping\r\n            if (!keepExpanded) {\r\n                return groups[0];\r\n            } else {\r\n                return this.expandOneOrAll(null, this.expanded);\r\n            }\r\n        } else {\r\n            // set all rows to 0 grouping\r\n            arrayToGroup.forEach(row => {\r\n                row.__groupLvl = 0;\r\n            });\r\n\r\n            // clear prev grouping\r\n            this.grouping = [];\r\n\r\n            return arrayToGroup;\r\n        }\r\n    }\r\n\r\n    public getExpanded() {\r\n        return Array.from(this.expanded);\r\n    }\r\n\r\n    public setExpanded(x: string[]) {\r\n        this.expanded = new Set(x);\r\n    }\r\n\r\n    public getGrouping(): IGroupingObj[] {\r\n        return this.grouping;\r\n    }\r\n\r\n    public setGrouping(g: IGroupingObj[]) {\r\n        this.grouping = g;\r\n    }\r\n\r\n    public expandOneOrAll(id: string, array?: Set<string>) {\r\n        let all = id ? false : true; // if no id, then all\r\n        if (!id) {\r\n            if (array) {\r\n                all = false;\r\n            }\r\n        }\r\n\r\n        if (!array) {\r\n            array = new Set([]);\r\n        }\r\n        let subGroup: Function;\r\n        const collection: IDataRow[] = [];\r\n        const mainGroups = this.groups[0];\r\n\r\n        // loop children\r\n        // g = group\r\n        // sg = subgroup\r\n        subGroup = (g: IDataRow) => {\r\n            g.__groupChildren.forEach((sg: IDataRow) => {\r\n                collection.push(sg);\r\n                switch (true) {\r\n                    case all:\r\n                    case sg.__groupID === id:\r\n                    case array.has(sg.__groupID):\r\n                    case sg.__groupID !== id && sg.__groupExpanded:\r\n                        if (sg.__groupChildren) {\r\n                            sg.__groupExpanded = true;\r\n                            this.expanded.add(sg.__groupID);\r\n                            subGroup(sg);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        // need anything here ?\r\n                        break;\r\n                }\r\n            });\r\n        };\r\n\r\n        // loop main groups\r\n        mainGroups.forEach((g: IDataRow) => {\r\n            collection.push(g);\r\n            switch (true) {\r\n                case all:\r\n                case g.__groupID === id:\r\n                case array.has(g.__groupID):\r\n                case g.__groupID !== id && g.__groupExpanded:\r\n                    g.__groupExpanded = true;\r\n                    this.expanded.add(g.__groupID);\r\n                    if (g.__groupChildren) {\r\n                        subGroup(g);\r\n                    }\r\n                    break;\r\n                default:\r\n                    // need anything here ?\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    public collapseOneOrAll(id?: string) {\r\n        const all = id ? false : true; // if no id, then all\r\n        id = id === undefined ? null : id;\r\n        let subGroup: Function;\r\n        const collection: IDataRow[] = [];\r\n        const mainGroups = this.groups[0];\r\n\r\n        // lopp children\r\n        subGroup = (g: IDataRow) => {\r\n            g.__groupChildren.forEach((sg: IDataRow) => {\r\n                switch (true) {\r\n                    case all:\r\n                        if (sg.__groupChildren) {\r\n                            sg.__groupExpanded = false;\r\n                            this.expanded.delete(sg.__groupID);\r\n                            subGroup(sg);\r\n                        }\r\n                        break;\r\n                    case sg.__groupID === id:\r\n                        collection.push(sg);\r\n                        this.expanded.delete(sg.__groupID);\r\n                        sg.__groupExpanded = false;\r\n                        break;\r\n                    default:\r\n                        collection.push(sg);\r\n                        if (sg.__groupChildren && sg.__groupExpanded) {\r\n                            subGroup(sg);\r\n                        }\r\n                        break;\r\n                }\r\n            });\r\n        };\r\n\r\n        // loop main groups\r\n        mainGroups.forEach((g: IDataRow) => {\r\n            collection.push(g);\r\n            switch (true) {\r\n                case all:\r\n                    g.__groupExpanded = false;\r\n                    this.expanded.delete(g.__groupID);\r\n                    if (g.__groupChildren) {\r\n                        subGroup(g);\r\n                    }\r\n                    break;\r\n                case g.__groupID === id:\r\n                    g.__groupExpanded = false;\r\n                    this.expanded.delete(g.__groupID);\r\n                    break;\r\n                default:\r\n                    if (g.__groupChildren && g.__groupExpanded) {\r\n                        subGroup(g);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n\r\n        return collection;\r\n    }\r\n\r\n    private createMainGrouping(array: IDataRow[], groupBy: string, groupNo: number) {\r\n        const tempGroupArray: IDataRow[] = [];\r\n        let curGroup: IDataRow = {} as IDataRow;\r\n        let tempValue: string = null;\r\n\r\n        // first level, here we use array\r\n        array.forEach(element => {\r\n            let gidm = element[groupBy];\r\n            gidm = typeof gidm === 'boolean' ? gidm.toString() : gidm;\r\n            gidm = gidm || 'blank';\r\n\r\n            if (gidm !== tempValue) {\r\n                curGroup = {\r\n                    __groupName: gidm || 'blank',\r\n                    __group: true,\r\n                    __groupID: gidm,\r\n                    __groupLvl: groupNo,\r\n                    __groupChildren: [element],\r\n                    __groupTotal: 1,\r\n                    __groupExpanded: false\r\n                };\r\n                element.__groupLvl = groupNo + 1;\r\n                tempValue = gidm;\r\n                tempGroupArray.push(curGroup);\r\n            } else {\r\n                element.__groupLvl = groupNo + 1;\r\n                curGroup.__groupChildren.push(element);\r\n                curGroup.__groupTotal++;\r\n            }\r\n        });\r\n\r\n        return tempGroupArray;\r\n    }\r\n\r\n    private groupChildren(childGroupArray: IDataRow[], groupBy: string, groupNo: number) {\r\n        const tempGroupArray: IDataRow[] = [];\r\n\r\n        let curGroup: IDataRow = {} as IDataRow;\r\n\r\n        // loop groups\r\n        childGroupArray.forEach((element: IDataRow) => {\r\n            let tempValue: string = null;\r\n            // loop children\r\n            const rebuiltChildrenArray: IDataRow[] = [];\r\n            element.__groupChildren.forEach((child: IDataRow) => {\r\n                if (child[groupBy] !== tempValue) {\r\n                    const gidm = child[groupBy] || 'blank';\r\n                    const gidc = element.__groupID || 'blank';\r\n                    curGroup = {\r\n                        __groupName: child[groupBy],\r\n                        __groupID: gidc + '-' + gidm,\r\n                        __group: true,\r\n                        __groupLvl: groupNo,\r\n                        __groupChildren: [child],\r\n                        __groupTotal: 1,\r\n                        __groupExpanded: false\r\n                    };\r\n                    child.__groupLvl = groupNo + 1;\r\n\r\n                    tempValue = child[groupBy];\r\n                    rebuiltChildrenArray.push(curGroup);\r\n                    tempGroupArray.push(curGroup);\r\n                } else {\r\n                    child.__groupLvl = groupNo + 1;\r\n                    curGroup.__groupChildren.push(child);\r\n                    curGroup.__groupTotal++;\r\n                }\r\n            });\r\n\r\n            // replace children with new groups\r\n            element.__groupChildren = rebuiltChildrenArray;\r\n        });\r\n\r\n        return tempGroupArray;\r\n    }\r\n}\r\n","import { render, html } from 'lit-html';\r\nimport { COL_SETUP as gridConfig } from './colSetup';\r\nimport { DummyDataGenerator } from './dummyDataGenerator';\r\nimport { IGridConfig } from 'lit-html-free-grid';\r\n\r\nexport class AppComponent extends HTMLElement {\r\n    private data: any = [];\r\n    private gridConfig: IGridConfig;\r\n    private dummyDataGenerator: DummyDataGenerator;\r\n\r\n    constructor() {\r\n        super();\r\n        this.dummyDataGenerator = new DummyDataGenerator();\r\n        this.data = this.dummyDataGenerator.generateData(1000);\r\n        this.gridConfig = gridConfig;\r\n    }\r\n\r\n    public connectedCallback() {\r\n        this.render();\r\n    }\r\n\r\n    public replaceData(x: number) {\r\n        this.data = this.dummyDataGenerator.generateData(x);\r\n        this.render();\r\n    }\r\n    public clear() {\r\n        this.gridConfig.groupingExpanded = [];\r\n        this.gridConfig.sortingSet = [];\r\n        this.gridConfig.groupingSet = [];\r\n        (<any>this.getElementsByTagName('FREE-GRID')[0]).manualConfigChange();\r\n\r\n    }\r\n\r\n    public addData(x: number) {\r\n        this.data = this.data.concat(this.dummyDataGenerator.generateData(x));\r\n        this.render();\r\n    }\r\n\r\n    public render() {\r\n        render(\r\n            html`\r\n                <free-grid\r\n                    class=\"free-grid\"\r\n                    .data=${this.data}\r\n                    .config=${this.gridConfig}\r\n                >\r\n                </free-grid>\r\n            `,\r\n            this\r\n        );\r\n    }\r\n}\r\n\r\nif(!customElements.get('app-component')){\r\n    customElements.define('app-component', AppComponent);\r\n}\r\n\r\n","import { IGridConfig } from 'lit-html-free-grid';\r\n\r\nexport const COL_SETUP: IGridConfig = {\r\n    rowHeight: 60,\r\n    panelHeight: 0,\r\n    headerHeight: 0,\r\n    footerHeight: 0,\r\n\r\n    selectionMode: 'multiple',\r\n    columns: [\r\n        {\r\n            header: 'index',\r\n            attribute: 'index',\r\n            type: 'number',\r\n            width: 120,\r\n            filterable: {},\r\n            sortable: {}\r\n        },\r\n        {\r\n            header: 'First',\r\n            attribute: 'first',\r\n            width: 100,\r\n            filterable: {},\r\n            sortable: {},\r\n            allowGrouping: true\r\n        },\r\n        {\r\n            header: 'Last',\r\n            attribute: 'last',\r\n            type: 'text',\r\n            width: 100,\r\n            filterable: {},\r\n            sortable: {},\r\n            allowGrouping: true\r\n        }\r\n    ]\r\n};\r\n","import * as internalDataArray from './dummyData';\r\n\r\nexport class DummyDataGenerator {\r\n    public rowTop: number;\r\n    private totalGenerated: number;\r\n    private first: any;\r\n    private last: any;\r\n    private images: any;\r\n    private color: any;\r\n    private internalDataArray: any;\r\n\r\n    constructor() {\r\n        this.totalGenerated = 0;\r\n        // transform json object to an array\r\n        this.internalDataArray = internalDataArray.data;\r\n        this.rowTop = 0;\r\n        this.first = [];\r\n        this.last = [];\r\n        this.images = [];\r\n        this.color = [];\r\n\r\n\r\n        for (let i = 0; i < this.internalDataArray.length; i++) {\r\n            this.first.push(this.internalDataArray[i].first);\r\n            this.last.push(this.internalDataArray[i].last);\r\n            this.images.push(this.internalDataArray[i].image);\r\n            this.color.push(this.internalDataArray[i].color);\r\n        }\r\n    }\r\n\r\n    public reset(): void {\r\n        this.totalGenerated = 0;\r\n    }\r\n\r\n    public generateData(no: any): any {\r\n        const dummyArray = [];\r\n        for (let i = 0; i < no; i++) {\r\n            // up count\r\n            this.totalGenerated++;\r\n            const random1 = Math.floor(Math.random() * 27) + 0;\r\n            const random2 = Math.floor(Math.random() * 27) + 0;\r\n            const random3 = Math.floor(Math.random() * 27) + 0;\r\n            const random4 = Math.floor(Math.random() * 27) + 0;\r\n            const date = new Date(new Date().setDate(new Date().getDate() + (Math.floor(Math.random() * 300) + 0)));\r\n            dummyArray.push({\r\n/*                 __group: i % 5 === 0 ? true : false,\r\n                __groupName: i % 5 === 0 ? \"test\" : null,\r\n                __groupLvl: i % 5 === 0 ? 1 : 1,\r\n                __groupTotal: i % 5 === 0 ? 200 : null, */\r\n                index: this.totalGenerated,\r\n                name: i % 7 === 0 ? null : this.first[random4] + ' ' + this.last[random3],\r\n                first: this.first[random4],\r\n                last: this.last[random3],\r\n                images: this.images[random2],\r\n                color: this.color[random4],\r\n                number: Math.floor(Math.random() * 9000) + 0,\r\n                bool: random1 % 3 ? true : false,\r\n                date: date\r\n            });\r\n        }\r\n\r\n        return dummyArray;\r\n    }\r\n\r\n    // tok it from a polymer sample resonse data\r\n    // https://elements.polymer-project.org/elements/iron-list?view=demo:demo/selection.html&active=iron-list\r\n}\r\n","export const data = [\r\n    {\r\n        first: 'Isabel',\r\n        last: 'Conrad',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/enda/73.jpg',\r\n        color: 'rgb(76,120,108)'\r\n    },\r\n    {\r\n        first: 'Jocelyn',\r\n        last: 'Wooten',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/guillogo/73.jpg',\r\n        color: 'rgb(134,91,60)'\r\n    },\r\n    {\r\n        first: 'Valentine',\r\n        last: 'Meyer',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/iboldurev/73.jpg',\r\n        color: 'rgb(201,142,97)'\r\n    },\r\n    {\r\n        first: 'Silva',\r\n        last: 'Alexander',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/73.jpg',\r\n        color: 'rgb(113,105,251)'\r\n    },\r\n    {\r\n        first: 'Hopkins',\r\n        last: 'Wong',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/taherrapee/73.jpg',\r\n        color: 'rgb(133,126,66)'\r\n    },\r\n    {\r\n        first: 'Harriet',\r\n        last: 'Sherman',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/ismailmayat/73.jpg',\r\n        color: 'rgb(195,89,110)'\r\n    },\r\n    {\r\n        first: 'Stacie',\r\n        last: 'Bartlett',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/73.jpg',\r\n        color: 'rgb(164,84,221)'\r\n    },\r\n    {\r\n        first: 'Charlene',\r\n        last: 'Stevens',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/73.jpg',\r\n        color: 'rgb(99,147,74)'\r\n    },\r\n    {\r\n        first: 'Reyes',\r\n        last: 'Hartman',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/73.jpg',\r\n        color: 'rgb(99,55,193)'\r\n    },\r\n    {\r\n        first: 'Alissa',\r\n        last: 'Duncan',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/73.jpg',\r\n        color: 'rgb(218,58,52)'\r\n    },\r\n    {\r\n        first: 'Christina',\r\n        last: 'Craft',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/73.jpg',\r\n        color: 'rgb(181,253,141)'\r\n    },\r\n    {\r\n        first: 'Burt',\r\n        last: 'Landry',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/73.jpg',\r\n        color: 'rgb(95,147,193)'\r\n    },\r\n    {\r\n        first: 'Baldwin',\r\n        last: 'Hammond',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/jonny_moon/73.jpg',\r\n        color: 'rgb(175,176,59)'\r\n    },\r\n    {\r\n        first: 'Laverne',\r\n        last: 'Hampton',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/alyssalowww/73.jpg',\r\n        color: 'rgb(225,78,134)'\r\n    },\r\n    {\r\n        first: 'Kirsten',\r\n        last: 'Chang',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/rafelorden/73.jpg',\r\n        color: 'rgb(118,83,134)'\r\n    },\r\n    {\r\n        first: 'Mercado',\r\n        last: 'Hancock',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/73.jpg',\r\n        color: 'rgb(244,178,231)'\r\n    },\r\n    {\r\n        first: 'Obrien',\r\n        last: 'Bruce',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/73.jpg',\r\n        color: 'rgb(52,103,133)'\r\n    },\r\n    {\r\n        first: 'Pearl',\r\n        last: 'Moran',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/sectronov/73.jpg',\r\n        color: 'rgb(168,119,234)'\r\n    },\r\n    {\r\n        first: 'Underwood',\r\n        last: 'Barton',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/starburst1977/73.jpg',\r\n        color: 'rgb(112,197,153)'\r\n    },\r\n    {\r\n        first: 'Solomon',\r\n        last: 'Lloyd',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/73.jpg',\r\n        color: 'rgb(69,68,176)'\r\n    },\r\n    {\r\n        first: 'Lyons',\r\n        last: 'Stevenson',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/iamasifmirza/73.jpg',\r\n        color: 'rgb(178,99,182)'\r\n    },\r\n    {\r\n        first: 'Swanson',\r\n        last: 'Richardson',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/73.jpg',\r\n        color: 'rgb(230,107,202)'\r\n    },\r\n    {\r\n        first: 'Aida',\r\n        last: 'Hurley',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/73.jpg',\r\n        color: 'rgb(119,239,85)'\r\n    },\r\n    {\r\n        first: 'Mccormick',\r\n        last: 'Jensen',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/menghe/73.jpg',\r\n        color: 'rgb(204,198,130)'\r\n    },\r\n    {\r\n        first: 'Ramona',\r\n        last: 'Meyers',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/heyanata/73.jpg',\r\n        color: 'rgb(236,222,59)'\r\n    },\r\n    {\r\n        first: 'Sharp',\r\n        last: 'Lindsay',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/73.jpg',\r\n        color: 'rgb(218,74,95)'\r\n    },\r\n    {\r\n        first: 'Dina',\r\n        last: 'Robbins',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/73.jpg',\r\n        expanded: false,\r\n        color: 'rgb(158,62,57)'\r\n    },\r\n    {\r\n        first: 'Franco',\r\n        last: 'Carrillo',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/w8candice/73.jpg',\r\n        color: 'rgb(89,84,186)'\r\n    },\r\n    {\r\n        first: 'Guadalupe',\r\n        last: 'Odom',\r\n        image: 'https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/73.jpg',\r\n        color: 'rgb(180,227,238)'\r\n    }\r\n];\r\n"]}